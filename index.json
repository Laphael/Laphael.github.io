[{"categories":["软件应用"],"content":"安装相关的系统依赖 sudo zypper install kernel-source kernel-devel gcc ","date":"2023-05-31","objectID":"/posts/d4ead7a4/:1:0","tags":["opensuse","vmware"],"title":"Opensuse安装vmware Workstation Pro","uri":"/posts/d4ead7a4/"},{"categories":["软件应用"],"content":"开始安装 ","date":"2023-05-31","objectID":"/posts/d4ead7a4/:2:0","tags":["opensuse","vmware"],"title":"Opensuse安装vmware Workstation Pro","uri":"/posts/d4ead7a4/"},{"categories":["软件应用"],"content":"添加可执行权限 chmod +x VMware-Workstation-Full-17.0.2-21581411.x86_64.bundle ","date":"2023-05-31","objectID":"/posts/d4ead7a4/:2:1","tags":["opensuse","vmware"],"title":"Opensuse安装vmware Workstation Pro","uri":"/posts/d4ead7a4/"},{"categories":["软件应用"],"content":"安装 sudo ./VMware-Workstation-Full-17.0.2-21581411.x86_64.bundle ","date":"2023-05-31","objectID":"/posts/d4ead7a4/:2:2","tags":["opensuse","vmware"],"title":"Opensuse安装vmware Workstation Pro","uri":"/posts/d4ead7a4/"},{"categories":["软件应用"],"content":"Resilio Sync在linux下的安装方式就不讲了，官方提供了大量发行版的安装包，根据自己的linux发行版下载安装即可。 ","date":"2023-05-28","objectID":"/posts/821e7658/:0:0","tags":["linux","resiliosync"],"title":"Linux下设置ResilioSync","uri":"/posts/821e7658/"},{"categories":["软件应用"],"content":"管理界面 linux下，Resilio Sync必须使用web界面来进行管理，地址是: https://localhost:8888/gui/ 首次登录时，会要求你进行注册。注意：在注册时，只需要填写用户名即可，不必填写密码。 ","date":"2023-05-28","objectID":"/posts/821e7658/:1:0","tags":["linux","resiliosync"],"title":"Linux下设置ResilioSync","uri":"/posts/821e7658/"},{"categories":["软件应用"],"content":"用户和权限问题 默认情况下，Resilio Sync会新建一个名为rslsync的用户，来进行相关的同步和管理。 这种方式很不友好，因为在同步的时候，只能同步到rslsync这个用户权限的文件夹里。 虽然官方提供了方法来使用当前用户进行同步，但是在实际操作过程中还是有问题。 因此，还是推荐使用另一种官方提供的方法 ","date":"2023-05-28","objectID":"/posts/821e7658/:2:0","tags":["linux","resiliosync"],"title":"Linux下设置ResilioSync","uri":"/posts/821e7658/"},{"categories":["软件应用"],"content":"使用当前用户来启动和管理Resilio Sync ","date":"2023-05-28","objectID":"/posts/821e7658/:3:0","tags":["linux","resiliosync"],"title":"Linux下设置ResilioSync","uri":"/posts/821e7658/"},{"categories":["软件应用"],"content":"修改resilio服务 sudo vi /usr/lib/systemd/user/resilio-sync.service 找到： WantedBy=multi-user.target 修改成： WantedBy=default.target ","date":"2023-05-28","objectID":"/posts/821e7658/:3:1","tags":["linux","resiliosync"],"title":"Linux下设置ResilioSync","uri":"/posts/821e7658/"},{"categories":["软件应用"],"content":"使用当前用户自动启动服务 sudo systemctl --user enable resilio-sync ","date":"2023-05-28","objectID":"/posts/821e7658/:3:2","tags":["linux","resiliosync"],"title":"Linux下设置ResilioSync","uri":"/posts/821e7658/"},{"categories":["操作系统"],"content":"从windows 10 1903版本开始，微软为win10默认保留了大约7G左右的系统空间，用于防止因存储空间不足导致的更新失败问题。 通过下面几个命令，可以将这保留的7G空间释放出来： 以管理员打开powershell: ","date":"2023-05-07","objectID":"/posts/7a83bb33/:0:0","tags":["windows"],"title":"Windows10关闭系统保留的7G空间","uri":"/posts/7a83bb33/"},{"categories":["操作系统"],"content":"一、键入下条命令即可关闭，立即生效 DISM.exe /Online /Set-ReservedStorageState /State:Disabled ","date":"2023-05-07","objectID":"/posts/7a83bb33/:1:0","tags":["windows"],"title":"Windows10关闭系统保留的7G空间","uri":"/posts/7a83bb33/"},{"categories":["操作系统"],"content":"二、键入下条命令即可启用，立即生效 DISM.exe /Online /Set-ReservedStorageState /State:Enabled ","date":"2023-05-07","objectID":"/posts/7a83bb33/:2:0","tags":["windows"],"title":"Windows10关闭系统保留的7G空间","uri":"/posts/7a83bb33/"},{"categories":["操作系统"],"content":"三、查看当前保留空间的状态 DISM.exe /Online /Get-ReservedStorageState ","date":"2023-05-07","objectID":"/posts/7a83bb33/:3:0","tags":["windows"],"title":"Windows10关闭系统保留的7G空间","uri":"/posts/7a83bb33/"},{"categories":["操作系统"],"content":"在使用windows server的时候，可以使用命令行来删除windows defender. ","date":"2023-03-16","objectID":"/posts/dfbed6b5/:0:0","tags":["windows","powershell"],"title":"使用命令行删除windows Defender","uri":"/posts/dfbed6b5/"},{"categories":["操作系统"],"content":"卸载 Windows Server 2016 或 Windows Server 2019 上的 Microsoft Defender 防病毒 Uninstall-WindowsFeature -Name Windows-Defender ","date":"2023-03-16","objectID":"/posts/dfbed6b5/:1:0","tags":["windows","powershell"],"title":"使用命令行删除windows Defender","uri":"/posts/dfbed6b5/"},{"categories":["操作系统"],"content":"关闭 Microsoft Defender 防病毒 GUI Uninstall-WindowsFeature -Name Windows-Defender-GUI 注意，上面这条关闭GUI的命令，在windows server 2022下无效。 ","date":"2023-03-16","objectID":"/posts/dfbed6b5/:2:0","tags":["windows","powershell"],"title":"使用命令行删除windows Defender","uri":"/posts/dfbed6b5/"},{"categories":["操作系统"],"content":" 系统是almalinux 9.0,桌面是gnome。 ","date":"2023-03-05","objectID":"/posts/9d4c89b2/:0:0","tags":["almalinux","selinux"],"title":"AlmaLinux9安装xrdp远程桌面","uri":"/posts/9d4c89b2/"},{"categories":["操作系统"],"content":"启用epel-release sudo dnf in epel-release sudo dnf up -y ","date":"2023-03-05","objectID":"/posts/9d4c89b2/:1:0","tags":["almalinux","selinux"],"title":"AlmaLinux9安装xrdp远程桌面","uri":"/posts/9d4c89b2/"},{"categories":["操作系统"],"content":"安装xrdp sudo dnf in xrdp -y ","date":"2023-03-05","objectID":"/posts/9d4c89b2/:2:0","tags":["almalinux","selinux"],"title":"AlmaLinux9安装xrdp远程桌面","uri":"/posts/9d4c89b2/"},{"categories":["操作系统"],"content":"配置文件 sudo vi ~/.xinitrc 添加下面内容： exec /usr/bin/gnome-session ","date":"2023-03-05","objectID":"/posts/9d4c89b2/:3:0","tags":["almalinux","selinux"],"title":"AlmaLinux9安装xrdp远程桌面","uri":"/posts/9d4c89b2/"},{"categories":["操作系统"],"content":"启动xrdp服务 sudo systemctl start xrdp sudo systemctl enable xrdp ","date":"2023-03-05","objectID":"/posts/9d4c89b2/:4:0","tags":["almalinux","selinux"],"title":"AlmaLinux9安装xrdp远程桌面","uri":"/posts/9d4c89b2/"},{"categories":["操作系统"],"content":"添加防火墙例外 firewall-cmd --zone=public --permanent --add-port=3389/tcp firewall-cmd --reload ","date":"2023-03-05","objectID":"/posts/9d4c89b2/:5:0","tags":["almalinux","selinux"],"title":"AlmaLinux9安装xrdp远程桌面","uri":"/posts/9d4c89b2/"},{"categories":["操作系统"],"content":"客户端 在linux下，推荐使用remmina来连接远程桌面。remmina具备保存会话、用户名、密码和自动调整分辨率等功能，值得尝试 ","date":"2023-03-05","objectID":"/posts/9d4c89b2/:6:0","tags":["almalinux","selinux"],"title":"AlmaLinux9安装xrdp远程桌面","uri":"/posts/9d4c89b2/"},{"categories":["操作系统"],"content":"排错 现象：能够成功登录，但是登录后却是黑屏 解决：很大可能是没有退出远程机器的登录界面导致的。 如果是非服务器版本的windows，通过远程桌面登录后，会自动注销当前正在登录的用户。 Linux下没有这个功能，需要手动退出所有当前在图形界面下的登录，然后才能正常使用xrdp登录。 ","date":"2023-03-05","objectID":"/posts/9d4c89b2/:7:0","tags":["almalinux","selinux"],"title":"AlmaLinux9安装xrdp远程桌面","uri":"/posts/9d4c89b2/"},{"categories":["操作系统"],"content":"Ubuntu在日常使用时，经常会弹出一个错误报告窗口，提示你“XXX已经崩溃，是否发送错误信息”之类的内容。 这个挺烦人的，毕竟在windows下我也从来没发送过系统错误报告。 出现这个弹窗，是因为ubuntu默认安装并启用了Appport这个服务。如果不想提示错误汇报，禁用这个软件就可以解决了。 编辑Apport配置文件 sudo vi /etc/default/apport 修改配置 把enabled=1改成enabled=0 重启生效。 ","date":"2023-03-05","objectID":"/posts/4ba43e1c/:0:0","tags":["ubuntu"],"title":"Ubuntu禁用错误报告","uri":"/posts/4ba43e1c/"},{"categories":["软件应用"],"content":"本文用来记录在日常使用 Git 中学到的一些知识点，不定时更新。 ","date":"2023-02-25","objectID":"/posts/8d738bf7/:0:0","tags":["git"],"title":"Git日常使用总结","uri":"/posts/8d738bf7/"},{"categories":["软件应用"],"content":"常规设置 ","date":"2023-02-25","objectID":"/posts/8d738bf7/:1:0","tags":["git"],"title":"Git日常使用总结","uri":"/posts/8d738bf7/"},{"categories":["软件应用"],"content":"设置 Git 账号的邮箱和用户名 这是使用 Git 的第一步，如果没有设置，根本用不了 Git。 git config --global user.email \"you@example.com\" git config --global user.name \"Your Name\" ","date":"2023-02-25","objectID":"/posts/8d738bf7/:1:1","tags":["git"],"title":"Git日常使用总结","uri":"/posts/8d738bf7/"},{"categories":["软件应用"],"content":"生成 SSH 密钥 ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\" ","date":"2023-02-25","objectID":"/posts/8d738bf7/:1:2","tags":["git"],"title":"Git日常使用总结","uri":"/posts/8d738bf7/"},{"categories":["软件应用"],"content":"Git 子模块操作 ","date":"2023-02-25","objectID":"/posts/8d738bf7/:2:0","tags":["git"],"title":"Git日常使用总结","uri":"/posts/8d738bf7/"},{"categories":["软件应用"],"content":"Git 克隆含有子模块的仓库 如果一个 Git 仓库含有子模块（submodule），现在想要在克隆主仓库的时候，想要一并克隆子模块，则在git clone命令加上--recursive参数即可。例如： git clone --recursive https://github.com/chaconinc/MainProject ","date":"2023-02-25","objectID":"/posts/8d738bf7/:2:1","tags":["git"],"title":"Git日常使用总结","uri":"/posts/8d738bf7/"},{"categories":["软件应用"],"content":"子模块更新之后同步操作 如果更新了 submodule，然后更新了父项目中依赖的版本号,则在同步的时候,需要在 git pull之后，调用git submodule update来更新submodule信息。 如果在git pull之后，忘记了调用git submodule update，那么极有可能再次把旧的 submodule 依赖信息提交上去。 因此,正确的同步子模块的步骤是: 在父目录执行git pull 执行git status，查看子模块是否有修改 执行git submodule update，来更新子模块。 ","date":"2023-02-25","objectID":"/posts/8d738bf7/:2:2","tags":["git"],"title":"Git日常使用总结","uri":"/posts/8d738bf7/"},{"categories":["软件应用"],"content":"子模块修改和提交 默认情况下，git submodule update 并不会将 submodule 切到任何 branch，因此 submodule 的 HEAD 是处于游离状态的 (‘detached HEAD’ state)。 所以在修改前，记得一定要用 git checkout master 将当前的submodule分支切换到 master，然后才能做修改和提交。 因此，正确的修改和提交流程是： 对 submodule 做一些修改 切到 submodule 的目录 执行git checkout master 执行 commit 和 push 命令。 ","date":"2023-02-25","objectID":"/posts/8d738bf7/:2:3","tags":["git"],"title":"Git日常使用总结","uri":"/posts/8d738bf7/"},{"categories":["软件应用"],"content":" 网上文章千千万，最后还得自己实践一遍 本文是亲自验证过可行的，系统是Ubuntu 22.04.1。 在行文时特意针对第一次接触kvm的人做了一些解释（其实也是写给自己看的，相当于注释了）。 ","date":"2023-02-25","objectID":"/posts/f949f020/:0:0","tags":["linux","kvm"],"title":"在Ubuntu22.04上安装KVM虚拟化软件","uri":"/posts/f949f020/"},{"categories":["软件应用"],"content":"更新系统 sudo apt update \u0026\u0026 sudo apt upgrade ","date":"2023-02-25","objectID":"/posts/f949f020/:1:0","tags":["linux","kvm"],"title":"在Ubuntu22.04上安装KVM虚拟化软件","uri":"/posts/f949f020/"},{"categories":["软件应用"],"content":"检查主机是否支持KVM虚拟化 egrep -c '(vmx|svm)' /proc/cpuinfo 上面命令的意思是，统计/proc/cpuinfo输出中出现vmx或者svm的次数。 如果不为0,则表示主机支持KVM虚拟化。 所以说，只要数字不为0就可以了。如果是0的话，说明你的电脑不支持KVM虚拟化功能，下面的内容也不用再看了。 ","date":"2023-02-25","objectID":"/posts/f949f020/:2:0","tags":["linux","kvm"],"title":"在Ubuntu22.04上安装KVM虚拟化软件","uri":"/posts/f949f020/"},{"categories":["软件应用"],"content":"安装KVM虚拟化软件 sudo apt install qemu-kvm virt-manager libvirt-daemon-system virtinst libvirt-clients bridge-utils 上面virt-manager软件是一个kvm前端图形界面，用来创建和管理虚拟机很方便。当然也有别的选择。 ","date":"2023-02-25","objectID":"/posts/f949f020/:3:0","tags":["linux","kvm"],"title":"在Ubuntu22.04上安装KVM虚拟化软件","uri":"/posts/f949f020/"},{"categories":["软件应用"],"content":"启动libvirtd服务 sudo systemctl start libvirtd sudo systemctl start libvirtd ","date":"2023-02-25","objectID":"/posts/f949f020/:4:0","tags":["linux","kvm"],"title":"在Ubuntu22.04上安装KVM虚拟化软件","uri":"/posts/f949f020/"},{"categories":["软件应用"],"content":"把当前用户加入到kvm和libvirt组 sudo usermod -aG kvm $USER sudo usermod -aG libvirt $USER ","date":"2023-02-25","objectID":"/posts/f949f020/:5:0","tags":["linux","kvm"],"title":"在Ubuntu22.04上安装KVM虚拟化软件","uri":"/posts/f949f020/"},{"categories":["软件应用"],"content":"创建一个网桥 用于kvm虚拟机进行网络连接 新建一个配置文件01-netcfg.yaml： sudo vi /etc/netplan/01-netcfg.yaml 内容如下： network: ethernets: eno1: dhcp4: false dhcp6: false bridges: br0: interfaces: [eno1] dhcp4: false addresses: [192.168.8.33/24] macaddress: 18:c0:4d:2c:0d:09 routes: - to: default via: 192.168.8.252 metric: 100 nameservers: addresses: [192.168.8.252] parameters: stp: false dhcp6: false version: 2 应用配置文件： sudo netplan apply 上面的配置文件有几点注意事项： 格式必须完全一样，连缩进的空格也不能错。 eno1是我的网卡的名称，这里需要改成你自己的网卡的名字 可以用ip a查看你自己的网卡的名称。 addresses、macaddress、nameservers和routers里的路由要根据实际情况改成你自己的。 执行成功后，使用ip a查看会多出一个br0设备，同时原来的网卡，比如eno1会失去IP地址。这都是正常的，牵涉到一些网络知识，这里不再多说。 ","date":"2023-02-25","objectID":"/posts/f949f020/:6:0","tags":["linux","kvm"],"title":"在Ubuntu22.04上安装KVM虚拟化软件","uri":"/posts/f949f020/"},{"categories":["网络相关"],"content":" 前段时间把家庭网络改造了一下: 自己编译了openwrt软路由 一直以来的ikuai+openwrt旁路由模式，改成了只使用1个openwrt主路由， ","date":"2023-02-17","objectID":"/posts/cc8c44d2/:0:0","tags":["openwrt","zerotier"],"title":"解决openwrt软路由下两个客户端不通的问题","uri":"/posts/cc8c44d2/"},{"categories":["网络相关"],"content":"问题 改造完后,所有功能一切正常,唯独本地的两个主机:电脑和NAS之间不能使用zerotier互通了，而本地电脑连接到外网的moon服务器和连接到zerotier账户一切正常。 ","date":"2023-02-17","objectID":"/posts/cc8c44d2/:1:0","tags":["openwrt","zerotier"],"title":"解决openwrt软路由下两个客户端不通的问题","uri":"/posts/cc8c44d2/"},{"categories":["网络相关"],"content":"过程 在网上找解决方案，发现都是在openwrt上安装zerotier的互通解决方案。 而我的需求不同。我没有在openwrt上安装zerotier，只是希望openwrt下的客户端能够互通。 所有网上的解决方案对我来说都没有用。 ","date":"2023-02-17","objectID":"/posts/cc8c44d2/:2:0","tags":["openwrt","zerotier"],"title":"解决openwrt软路由下两个客户端不通的问题","uri":"/posts/cc8c44d2/"},{"categories":["网络相关"],"content":"解决方法 解决方法非常简单，在openwrt-防火墙下，把启用FullCone-NAT从高性能模式改成兼容模式就可以了。 原理我不清楚，怀疑是FullCone-NA兼容性的问题。 ","date":"2023-02-17","objectID":"/posts/cc8c44d2/:3:0","tags":["openwrt","zerotier"],"title":"解决openwrt软路由下两个客户端不通的问题","uri":"/posts/cc8c44d2/"},{"categories":["操作系统"],"content":"gnome如果调整了缩放，鼠标指针的大小不会跟着变，需要自定义大小。 运行下面的命令即可调整鼠标指针大小: dconf write /org/gnome/desktop/interface/cursor-size 40 缩放150%的话，调整到大小40比较合适。 ","date":"2023-01-19","objectID":"/posts/f55580eb/:0:0","tags":["linux","gnome","鼠标"],"title":"Gnome调整鼠标指针大小","uri":"/posts/f55580eb/"},{"categories":["网络相关"],"content":"偏向技术或者工具使用方面的博客，难免会随着时间和技术的更新，对文章进行一些修改。 使用hugo一年多以来，一直有一个问题没有解决，就是文章修改后不能正确的显示修改后的时间，即更新时间。 今天又想起这个长期以来的\"bug\"，这次终于彻底解决了。 ","date":"2023-01-14","objectID":"/posts/146871a6/:0:0","tags":["hugo","git"],"title":"使用Hugo搭建个人网站(七)-Hugo和Github Action正确修改文章的最后更新日期","uri":"/posts/146871a6/"},{"categories":["网络相关"],"content":"修改网站配置文件 在网站的配置文件 config.toml里添加如下字段: [frontmatter] lastmod = [\":git\", \"lastmod\", \":fileModTime\"] 另外，还需要启用GitInfo功能： enableGitInfo = true ","date":"2023-01-14","objectID":"/posts/146871a6/:1:0","tags":["hugo","git"],"title":"使用Hugo搭建个人网站(七)-Hugo和Github Action正确修改文章的最后更新日期","uri":"/posts/146871a6/"},{"categories":["网络相关"],"content":"修改Github Action 配置文件 完整的配置文件看这里 需要注意其中的这些配置： - name: Checkout uses: actions/checkout@v3 # 引用actions/checkout这个action，与所在的github仓库同名 with: submodules: true # Fetch Hugo themes (true OR recursive) 获取submodule主题 fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Disable quotePath run: git config --global core.quotePath false ","date":"2023-01-14","objectID":"/posts/146871a6/:2:0","tags":["hugo","git"],"title":"使用Hugo搭建个人网站(七)-Hugo和Github Action正确修改文章的最后更新日期","uri":"/posts/146871a6/"},{"categories":["网络相关"],"content":"fetch-depth: 0 fetch-depth 的默认值是 1，也就是说它默认只会拉取分支最近的一次 commit，这可能会导致一些文章的 GitInfo 变量无法获取到。 设置为 0 代表拉取所有分支的所有提交。 ","date":"2023-01-14","objectID":"/posts/146871a6/:2:1","tags":["hugo","git"],"title":"使用Hugo搭建个人网站(七)-Hugo和Github Action正确修改文章的最后更新日期","uri":"/posts/146871a6/"},{"categories":["网络相关"],"content":"Disable quotePath 原理是这样的：默认情况下，当文件名中包含中文的时候，git 会使用引号\" \"把文件名括起来。 但是这会导致 action 中无法读取 :GitInfo 变量，所以这里需要关闭quotePath功能。 这样就可以正确显示文章最后更新时间了，问题解决。 ","date":"2023-01-14","objectID":"/posts/146871a6/:2:2","tags":["hugo","git"],"title":"使用Hugo搭建个人网站(七)-Hugo和Github Action正确修改文章的最后更新日期","uri":"/posts/146871a6/"},{"categories":["操作系统"],"content":"问题描述 使用debian 11 + KDE 桌面，通过samba协议连接到NAS后，发现无法播放NAS上的视频文件。 ","date":"2023-01-13","objectID":"/posts/0ce4c4b3/:1:0","tags":["kde","samba","nas"],"title":"KDE播放Samba共享里的视频文件","uri":"/posts/0ce4c4b3/"},{"categories":["操作系统"],"content":"解决方法 安装kio-fuse即可 sudo apt install kio-fuse debian确实是稳定，在chrome和nvidia驱动方面非常出色，不比windows差，但是在一些小的易用性方面，还是有坑 ","date":"2023-01-13","objectID":"/posts/0ce4c4b3/:2:0","tags":["kde","samba","nas"],"title":"KDE播放Samba共享里的视频文件","uri":"/posts/0ce4c4b3/"},{"categories":["软件应用"],"content":"、 ","date":"2023-01-04","objectID":"/posts/9c090dd7/:0:0","tags":["wsl","vmware"],"title":"Wsl和vmware共存的问题","uri":"/posts/9c090dd7/"},{"categories":["软件应用"],"content":"问题描述 近期在使用wsl2和vmware时遇到了一些问题 如果要使用wsl2，则必须要在windows功能里开启虚拟机平台。 但是开启虚拟机平台后，打开vmware、virtualBox等虚拟机时会提示 VMware Workstation与Device/Credential Guard不兼容 VT不支持、 该主机cpu类型不支持虚拟化性能计数器，开启模块VPMC的操作失败，未能启动虚拟机 等等错误。 ","date":"2023-01-04","objectID":"/posts/9c090dd7/:1:0","tags":["wsl","vmware"],"title":"Wsl和vmware共存的问题","uri":"/posts/9c090dd7/"},{"categories":["软件应用"],"content":"解决方法 解决方案很简单，就是把wsl2降为wsl1。 具体方法如下： ","date":"2023-01-04","objectID":"/posts/9c090dd7/:2:0","tags":["wsl","vmware"],"title":"Wsl和vmware共存的问题","uri":"/posts/9c090dd7/"},{"categories":["软件应用"],"content":"1.转换已经有的虚拟机 比如我现在的kali-linux虚拟机使用的是wsl2，想降为wsl1，则： wsl --set-version kali-linux 1 ","date":"2023-01-04","objectID":"/posts/9c090dd7/:2:1","tags":["wsl","vmware"],"title":"Wsl和vmware共存的问题","uri":"/posts/9c090dd7/"},{"categories":["软件应用"],"content":"2.删除虚拟机平台 管理员权限打开powershell，输入： Disable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform 重启电脑。 ","date":"2023-01-04","objectID":"/posts/9c090dd7/:2:2","tags":["wsl","vmware"],"title":"Wsl和vmware共存的问题","uri":"/posts/9c090dd7/"},{"categories":["软件应用"],"content":"问题描述 使用wsl安装完kali-linux后，从windows terminal下启动，报如下错误： ","date":"2023-01-02","objectID":"/posts/35265d36/:1:0","tags":["wsl","terminal"],"title":"Windows Terminal打开wsl报错的解决方法","uri":"/posts/35265d36/"},{"categories":["软件应用"],"content":"解决方法 打开windows terminal的kali-linux配置,修改启动的命令为wsl.exe ~ -d kali-linux，即中间添加一个~即可。 ","date":"2023-01-02","objectID":"/posts/35265d36/:2:0","tags":["wsl","terminal"],"title":"Windows Terminal打开wsl报错的解决方法","uri":"/posts/35265d36/"},{"categories":["软件应用"],"content":"下载windows terminal的图标 在这里下载。 ","date":"2023-01-01","objectID":"/posts/6ef25004/:1:0","tags":["windows","terminal"],"title":"Windows Terminal添加到右键菜单","uri":"/posts/6ef25004/"},{"categories":["软件应用"],"content":"创建文件夹 mkdir \"%USERPROFILE%\\AppData\\Local\\terminal\" 把下载的图标放到新创建的terminal文件夹里。 ","date":"2023-01-01","objectID":"/posts/6ef25004/:2:0","tags":["windows","terminal"],"title":"Windows Terminal添加到右键菜单","uri":"/posts/6ef25004/"},{"categories":["软件应用"],"content":"写入注册表 新建一个注册表文件，内容如下： Windows Registry Editor Version 5.00 [HKEY_CLASSES_ROOT\\Directory\\background\\shell\\在此处打开Windows Terminal] \"Icon\"=\"%USERPROFILE%\\\\AppData\\\\Local\\\\terminal\\\\terminal.ico\" [HKEY_CLASSES_ROOT\\Directory\\background\\shell\\在此处打开Windows Terminal\\command] @=\"wt -d \\\"%V\\\"\" 双击导入注册表即可。 ","date":"2023-01-01","objectID":"/posts/6ef25004/:3:0","tags":["windows","terminal"],"title":"Windows Terminal添加到右键菜单","uri":"/posts/6ef25004/"},{"categories":["软件应用"],"content":"修改启动文件夹 打开windows terminal的.json配置文件，找到如下位置并修改： \"profiles\": { \"defaults\": { \"startingDirectory\": null }, \"startingDirectory\": null这一行是新添加的。 完工。 ","date":"2023-01-01","objectID":"/posts/6ef25004/:4:0","tags":["windows","terminal"],"title":"Windows Terminal添加到右键菜单","uri":"/posts/6ef25004/"},{"categories":["软件应用"],"content":"问题描述 安装完 Conda 之后，开启终端将默认进入 base 环境。 但是，base 经常不是我们所需要的环境。因此，每次进入终端都得 conda activate 到想要的环境，很麻烦。 ","date":"2023-01-01","objectID":"/posts/0cab458e/:1:0","tags":["conda","python","windows","linux"],"title":"修改Conda默认启动的Python环境","uri":"/posts/0cab458e/"},{"categories":["软件应用"],"content":"解决方法 假如想让conda默认启动py3s这个python环境 ","date":"2023-01-01","objectID":"/posts/0cab458e/:2:0","tags":["conda","python","windows","linux"],"title":"修改Conda默认启动的Python环境","uri":"/posts/0cab458e/"},{"categories":["软件应用"],"content":"Linux 在shell的配置文件最后，添加source activate py3s 例如zsh，则 cd vi .zshrc 在最后添加 source activate py3s ","date":"2023-01-01","objectID":"/posts/0cab458e/:2:1","tags":["conda","python","windows","linux"],"title":"修改Conda默认启动的Python环境","uri":"/posts/0cab458e/"},{"categories":["软件应用"],"content":"windows 打开powershell 运行命令： notepad $PROFILE 如果提示不存在则新建即可。 在 Profile 文件中增加: conda activate py3s ","date":"2023-01-01","objectID":"/posts/0cab458e/:2:2","tags":["conda","python","windows","linux"],"title":"修改Conda默认启动的Python环境","uri":"/posts/0cab458e/"},{"categories":["软件应用"],"content":"utools是个快速启动工具，支持mac、win、linux三大平台，自带丰富的插件。 本人安装utools主要是为了它的词典插件，用来查词非常方便。 最新的3.3版本，在kali linux下可以正常安装，但是启动时却报错： Uncaught Exception: Error: libcrypto.so.1.1: ... 可以看出来，是libcrypto.so.1.1的问题。 在网上找了个最简单的解决方法，就是使用其它软件自带的libcrypto.so.1.1，比如wps的。 首先安装wps，然后查看libcrypto.so dpkg -S libcrypto.so 输出如下： sublime-text: /opt/sublime_text/libcrypto.so.1.1 wps-office: /opt/kingsoft/wps-office/office6/libcrypto.so wps-office: /opt/kingsoft/wps-office/office6/libcrypto.so.1.1 libssl3:amd64: /usr/lib/x86_64-linux-gnu/libcrypto.so.3 可以看到，我安装的sublime-text和wps都带有libcrypto.so.1.1，这里使用wps的。 sudo cp /opt/kingsoft/wps-office/office6/libcrypto.so.1.1 /opt/uTools/ 即可正常运行utools了。 ","date":"2022-12-29","objectID":"/posts/e1bbdf98/:0:0","tags":["linux","utools"],"title":"Linux下安装utools","uri":"/posts/e1bbdf98/"},{"categories":["软件应用"],"content":" 导出为ics格式 1、打开outlook，选中需要导出的日历 2、点击左上角文件–保存日历 3、弹出的对话框中，点击其它选项 4、按照下图中的选项来选择，然后点击确定 5、点击保存，即可导出为ics格式的日历 6、重复第一项，导出其他的日历 注意，每一次只能导出一个日历 ","date":"2022-12-27","objectID":"/posts/3553344e/:0:0","tags":["calendar","nas"],"title":"导出微软日历的方法","uri":"/posts/3553344e/"},{"categories":["程序设计"],"content":"设置自动换行/折行 按ctrl+alt+s,打开设置 在左上角搜索框中输入soft-wraps，打到editor-General,勾选soft-wrap these files,然后在最后添加; *.py。 找到editor-General-Console,勾选Use soft wraps in console,启用控制台的自动折行功能 ","date":"2022-12-24","objectID":"/posts/05159db4/:1:0","tags":["python","pycharm"],"title":"Pycharm的基本设置","uri":"/posts/05159db4/"},{"categories":["程序设计"],"content":"行号栏过宽 按ctrl+alt+s,打开设置 在左上角搜索框中输入show gutter icons，然后取消勾选show gutter icons即可。 ","date":"2022-12-24","objectID":"/posts/05159db4/:2:0","tags":["python","pycharm"],"title":"Pycharm的基本设置","uri":"/posts/05159db4/"},{"categories":["程序设计"],"content":"跳出成对的括号 在输入' '、\" \"、()等成对的括号后，如果想跳出当前括号，可以再按一下当前的括号即可跳出括号。 例如输入''后，再输入abcde,此时光标是处于e的后面、'的前面。 此时再按一下'，即可跳到'的后面了。 ","date":"2022-12-24","objectID":"/posts/05159db4/:3:0","tags":["python","pycharm"],"title":"Pycharm的基本设置","uri":"/posts/05159db4/"},{"categories":["操作系统"],"content":"vyos官方只有night-daily的镜像，没有稳定版的镜像。 自己手动编译的话，vyos的官方文档又写的不明不白的，感觉有故意的成份。 于是网上找了篇文章，简单明了的介绍了如何编译安装最新稳定LTS版本。 ","date":"2022-12-14","objectID":"/posts/c5ea52a2/:0:0","tags":["vyos","docker","debian"],"title":"手动编译vyos最新稳定版","uri":"/posts/c5ea52a2/"},{"categories":["操作系统"],"content":"vyos不同版本对应的编译环境 官方推荐是使用debian来搭建编译环境. vyos版本和debian版本对应关系如下： VyOS 1.3(equuleus) .\u003c—\u003e . Debian 10 (Buster) VyOS 1.4(sagitta, current) . \u003c—\u003e . Debian 11 (Bullseye) ","date":"2022-12-14","objectID":"/posts/c5ea52a2/:1:0","tags":["vyos","docker","debian"],"title":"手动编译vyos最新稳定版","uri":"/posts/c5ea52a2/"},{"categories":["操作系统"],"content":"安装Debian 10虚拟机 使用vmware，详情不再赘述。 不会安装虚拟机的话也就不用再想着手动编译vyos了。 因为要编译最新的lts 1.3.2版本，由上面的对应关系知道，需要安装debian 10. ","date":"2022-12-14","objectID":"/posts/c5ea52a2/:2:0","tags":["vyos","docker","debian"],"title":"手动编译vyos最新稳定版","uri":"/posts/c5ea52a2/"},{"categories":["操作系统"],"content":"给debian 10安装docker环境 $ sudo apt-get update $ sudo apt-get install -y apt-transport-https ca-certificates curl gnupg2 software-properties-common $ curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add - $ sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable\" $ sudo apt-get update $ sudo apt-get install -y docker-ce ## 添加当前用户到docker组 $ sudo usermod -aG docker \u003cYour username\u003e ","date":"2022-12-14","objectID":"/posts/c5ea52a2/:3:0","tags":["vyos","docker","debian"],"title":"手动编译vyos最新稳定版","uri":"/posts/c5ea52a2/"},{"categories":["操作系统"],"content":"编译ISO镜像 目前，最新的稳定版是1.3.2 LTS git clone -b 1.3.2 --single-branch https://github.com/vyos/vyos-build cd vyos-build docker run --rm -it --privileged -v $(pwd):/vyos -w /vyos vyos/vyos-build:current bash ./configure --architecture amd64 --build-by \"j.randomhacker@vyos.io\" --build-type \"release\" --version \"LTS 1.3.2\" sudo make iso ","date":"2022-12-14","objectID":"/posts/c5ea52a2/:4:0","tags":["vyos","docker","debian"],"title":"手动编译vyos最新稳定版","uri":"/posts/c5ea52a2/"},{"categories":["操作系统"],"content":"编译好的ISO镜像下载 在github上找到了个repo，专门发布编译好的lts镜像，地址在这里。 ","date":"2022-12-14","objectID":"/posts/c5ea52a2/:5:0","tags":["vyos","docker","debian"],"title":"手动编译vyos最新稳定版","uri":"/posts/c5ea52a2/"},{"categories":["软件应用"],"content":"在kali的zsh环境中使用miniconda，遇到一些问题，这里记录一下解决的过程。 对于其它的linux来说，应该是通用的。 ","date":"2022-12-12","objectID":"/posts/d96c6166/:0:0","tags":["zsh","python","conda"],"title":"Linux下使用miniconda的一些设置","uri":"/posts/d96c6166/"},{"categories":["软件应用"],"content":"使用命令行安装miniconda mkdir -p ~/miniconda3 wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda3/miniconda.sh ## 如果使用bash，则把下面命令中的zsh替换成bash： zsh ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3 rm -rf ~/miniconda3/miniconda.sh ## 如果使用zsh,则执行： ~/miniconda3/bin/conda init zsh ## 如果使用bash，则执行： ~/miniconda3/bin/conda init bash ","date":"2022-12-12","objectID":"/posts/d96c6166/:1:0","tags":["zsh","python","conda"],"title":"Linux下使用miniconda的一些设置","uri":"/posts/d96c6166/"},{"categories":["软件应用"],"content":"oh-my-zsh主题配置 默认情况下，使用双行显示的oh-my-zsh主题，会在第一行的前面显示(base)的标志: 这就非常的不美观，因此需要对oh-my-zsh的主题做一些修改。 这里以gnzh主题为例。 取消掉miniconda默认的环境显示： conda config --set changeps1 False 添加下面代码到gnzh主题的配置文件中 local conda_prompt='$(conda_prompt_info)' conda_prompt_info() { if [ -n \"$CONDA_DEFAULT_ENV\" ]; then echo -n \"%{$terminfo[bold]$fg[yellow]%}($CONDA_DEFAULT_ENV) %{$reset_color%}\" else echo -n '' fi } 注意：$conda_prompt一定要写成函数的形式，否则PROMPT只会在启动zsh的时候获取一次conda环境信息，后续切换环境就不会再改变了。 在gnzh主题配置文件的合适地方添加${conda_prompt} 例如下面： PROMPT=\"╭─${user_host}${conda_prompt}${current_dir}\\$(ruby_prompt_info)${git_branch} ╰─$PR_PROMPT \" RPROMPT=\"${return_code}\" 退出并重新进入shell，即可看到效果。 ","date":"2022-12-12","objectID":"/posts/d96c6166/:2:0","tags":["zsh","python","conda"],"title":"Linux下使用miniconda的一些设置","uri":"/posts/d96c6166/"},{"categories":["软件应用"],"content":"默认不启用conda的base环境 安装完miniconda后，每次登录系统都会自动启用默认的base环境，这就取代了系统自带的python2和python3。 如果想使用系统自带python环境，有两种方法，推荐使用方法2： 方法1: 手动退出base环境回到系统自带的环境 conda deactivate 方法2: 取消miniconda的base环境自启动设置： conda config --set auto_activate_base false 要进入base的话，可以手动运行命令conda activate base 加外，如果想让miniconda的base环境恢复自启动，可以： conda config --set auto_activate_base true ","date":"2022-12-12","objectID":"/posts/d96c6166/:3:0","tags":["zsh","python","conda"],"title":"Linux下使用miniconda的一些设置","uri":"/posts/d96c6166/"},{"categories":["软件应用"],"content":"问题描述 在vmware中安装linux的虚拟机，做了以下工作之后： 虚拟机使用的是kde桌面 虚拟机已经安装了open-vm-tolls和open-vm-tools-desktop 在虚拟机的高级选项中启用了拖放和复制粘贴等功能 依然不能和宿主机之间双向复制、粘贴和拖放文件。 本人使用vmware安装kali Linux，使用的是KDE桌面，就出现了上面的问题。 ","date":"2022-12-10","objectID":"/posts/d10df142/:1:0","tags":["linux","vmware","kde"],"title":"解决KDE桌面在vmware中的复制、粘贴和拖拽文件的问题","uri":"/posts/d10df142/"},{"categories":["软件应用"],"content":"原因 这是KDE桌面的一个bug 当运行ps -aef | grep vmtoolsd后，并不会出现类似下图中的第2行红框中的/usr/bin/vmtoolsd -n vmusr --blockFd 3的结果： 这就是导致不能复制、粘贴和拖放的原因 ","date":"2022-12-10","objectID":"/posts/d10df142/:2:0","tags":["linux","vmware","kde"],"title":"解决KDE桌面在vmware中的复制、粘贴和拖拽文件的问题","uri":"/posts/d10df142/"},{"categories":["软件应用"],"content":"解决方法 新建一个文件startkderc sudo vi /etc/xdg/startkderc 添加以下内容并保存： [General] systemdBoot=false 添加vmware-user-suid-wrapper到kde的自动启动 系统设置–开机与关机–自动启动–添加–添加应用程序，在弹出的对话框中输入/usr/bin/vmware-user-suid-wrapper 重新启动，问题解决 ","date":"2022-12-10","objectID":"/posts/d10df142/:3:0","tags":["linux","vmware","kde"],"title":"解决KDE桌面在vmware中的复制、粘贴和拖拽文件的问题","uri":"/posts/d10df142/"},{"categories":["软件应用"],"content":"延伸阅读 相关讨论的原文在这里。 另外提一点，在帖子中有人对fedora、archlinux和opensuse都做了测试，发现只有opensuse默认状态下一切功能正常。看来opensuse还是有点东西的😊。 再另外，我自己测试，debian 11.5 live版本也没有问题。 ","date":"2022-12-10","objectID":"/posts/d10df142/:4:0","tags":["linux","vmware","kde"],"title":"解决KDE桌面在vmware中的复制、粘贴和拖拽文件的问题","uri":"/posts/d10df142/"},{"categories":["软件应用"],"content":"我的显示器是27寸4K的分辨率。 在ubuntu下安装完davinci resolve 18后，发现启动后界面字体变得非常小，除了鹰眼我相信没人能看得清。 很明显，这是个Linux下的UI缩放的问题。 ","date":"2022-11-03","objectID":"/posts/3d3eb7db/:0:0","tags":["davinci","linux","显示器"],"title":"Davinci在linux下的HiDPI分辨率的问题","uri":"/posts/3d3eb7db/"},{"categories":["软件应用"],"content":"解决方法 网上一番搜索，找到了问题的解决方法： 原理很简单，就是给davinci的启动程序添加几个参数，如下： QT_DEVICE_PIXEL_RATIO=3 QT_AUTO_SCREEN_SCALE_FACTOR=true ./resolve 解释一下： QT_DEVICE_PIXEL_RATIO=3，最后这个3是放大的倍数，即放大300%。 如果是原始分辨率的话，这里设置为2就可以了。 但是如果已经调整过缩放了，比如我在ubuntu下已经设置为150%的缩放，这里设置为3比较合适。 ","date":"2022-11-03","objectID":"/posts/3d3eb7db/:1:0","tags":["davinci","linux","显示器"],"title":"Davinci在linux下的HiDPI分辨率的问题","uri":"/posts/3d3eb7db/"},{"categories":["软件应用"],"content":"添加到启动器 ubuntu可以使用alacarte这个软件编辑启动菜单。 sudo apt install alacarte 在davinci的安装目录/opt/resolve/bin下的新建一个文件davinci.sh，内容如下： #!/bin/sh cd /opt/resolve/bin \u0026\u0026 QT_DEVICE_PIXEL_RATIO=3 QT_AUTO_SCREEN_SCALE_FACTOR=true ./resolve 添加可执行权限： sudo chmod +x davinci.sh 运行alacarte，找到davinci的菜单项，点击属性–Browser，选中davinci.sh，保存即可。 ","date":"2022-11-03","objectID":"/posts/3d3eb7db/:2:0","tags":["davinci","linux","显示器"],"title":"Davinci在linux下的HiDPI分辨率的问题","uri":"/posts/3d3eb7db/"},{"categories":["软件应用"],"content":" 写作本文时,elasticsearch 8.3.4版本已经发布，无奈此版本与nextcloud集成的文章太少，因此还是使用elastic7。实际使用效果非常好。 ","date":"2022-10-28","objectID":"/posts/f092b728/:0:0","tags":["nextcloud","elasticsearch","ubuntu"],"title":"为nextcloud安装elasticsearch全文搜索","uri":"/posts/f092b728/"},{"categories":["软件应用"],"content":"环境相关 CPU:2核 内存:4G 操作系统: ubuntu 22.04 server java: openjdk-11-jdk php: 8.1 elasticsearch: 7.17.6 ednextcloud:24.0.6 ","date":"2022-10-28","objectID":"/posts/f092b728/:1:0","tags":["nextcloud","elasticsearch","ubuntu"],"title":"为nextcloud安装elasticsearch全文搜索","uri":"/posts/f092b728/"},{"categories":["软件应用"],"content":"安装java elasticsearch依赖于java sudo apt install openjdk-11-jdk ","date":"2022-10-28","objectID":"/posts/f092b728/:2:0","tags":["nextcloud","elasticsearch","ubuntu"],"title":"为nextcloud安装elasticsearch全文搜索","uri":"/posts/f092b728/"},{"categories":["软件应用"],"content":"安装elasticsearch 这里采用直接下载安装包来本地安装的方式。 原因是elasticsearch的中文分词插件elasticsearch-analysis-ik只有7.17.6版本。如果使用apt的方式安装会直接安装7.17.7版本，从而不匹配而无法使用。 这也是为什么会安装elasticsearch 7.17.6版本的原因。 ","date":"2022-10-28","objectID":"/posts/f092b728/:3:0","tags":["nextcloud","elasticsearch","ubuntu"],"title":"为nextcloud安装elasticsearch全文搜索","uri":"/posts/f092b728/"},{"categories":["软件应用"],"content":"下载 wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.17.6-amd64.deb ","date":"2022-10-28","objectID":"/posts/f092b728/:3:1","tags":["nextcloud","elasticsearch","ubuntu"],"title":"为nextcloud安装elasticsearch全文搜索","uri":"/posts/f092b728/"},{"categories":["软件应用"],"content":"安装 sudo dpkg -i elasticsearch-7.17.6-amd64.deb ","date":"2022-10-28","objectID":"/posts/f092b728/:3:2","tags":["nextcloud","elasticsearch","ubuntu"],"title":"为nextcloud安装elasticsearch全文搜索","uri":"/posts/f092b728/"},{"categories":["软件应用"],"content":"配置 vi /etc/elasticsearch/elasticsearch.yml 在56行左右，修改成下面的形式： network.host: localhost ","date":"2022-10-28","objectID":"/posts/f092b728/:3:3","tags":["nextcloud","elasticsearch","ubuntu"],"title":"为nextcloud安装elasticsearch全文搜索","uri":"/posts/f092b728/"},{"categories":["软件应用"],"content":"设置开机启动 sudo systemctl start elasticsearch sudo systemctl enable elasticsearch ","date":"2022-10-28","objectID":"/posts/f092b728/:3:4","tags":["nextcloud","elasticsearch","ubuntu"],"title":"为nextcloud安装elasticsearch全文搜索","uri":"/posts/f092b728/"},{"categories":["软件应用"],"content":"测试 curl -X GET \"localhost:9200\" 输出类似于下面： { \"name\" : \"myhostname\", \"cluster_name\" : \"elasticsearch\", \"cluster_uuid\" : \"T6xlz9vrRe7qE9D8U4We6Q\", \"version\" : { \"number\" : \"7.17.6\", \"build_flavor\" : \"default\", \"build_type\" : \"deb\", \"build_hash\" : \"f65e1yt67dc1d07b642e14a27f338990148ee5b6\", \"build_date\" : \"2022-08-23T11:08:48.893373482Z\", \"build_snapshot\" : false, \"lucene_version\" : \"8.11.1\", \"minimum_wire_compatibility_version\" : \"6.8.0\", \"minimum_index_compatibility_version\" : \"6.0.0-beta1\" }, \"tagline\" : \"You Know, for Search\" } 并不需要网上说的用户名和密码什么的。 ","date":"2022-10-28","objectID":"/posts/f092b728/:3:5","tags":["nextcloud","elasticsearch","ubuntu"],"title":"为nextcloud安装elasticsearch全文搜索","uri":"/posts/f092b728/"},{"categories":["软件应用"],"content":"安装中文插件 ingest-attachment /usr/share/elasticsearch/bin/elasticsearch-plugin install ingest-attachment ik分词插件 /usr/share/elasticsearch/bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.17.6/elasticsearch-analysis-ik-7.17.6.zip ","date":"2022-10-28","objectID":"/posts/f092b728/:3:6","tags":["nextcloud","elasticsearch","ubuntu"],"title":"为nextcloud安装elasticsearch全文搜索","uri":"/posts/f092b728/"},{"categories":["软件应用"],"content":"nextcloud设置 ","date":"2022-10-28","objectID":"/posts/f092b728/:4:0","tags":["nextcloud","elasticsearch","ubuntu"],"title":"为nextcloud安装elasticsearch全文搜索","uri":"/posts/f092b728/"},{"categories":["软件应用"],"content":"安装搜索相关插件 full text开头的那几个，如下图几个： ","date":"2022-10-28","objectID":"/posts/f092b728/:4:1","tags":["nextcloud","elasticsearch","ubuntu"],"title":"为nextcloud安装elasticsearch全文搜索","uri":"/posts/f092b728/"},{"categories":["软件应用"],"content":"设置插件 打开设置-全文搜索,如下图配置 ","date":"2022-10-28","objectID":"/posts/f092b728/:4:2","tags":["nextcloud","elasticsearch","ubuntu"],"title":"为nextcloud安装elasticsearch全文搜索","uri":"/posts/f092b728/"},{"categories":["软件应用"],"content":"生成索引 进入到nextcloud的安装目录下,例如/var/www/nextcloud cd /var/www/nextcloud 运行命令： sudo -u www-data php ./occ fulltextsearch:index 这时，可以去nextcloud里试试全文搜索了。 ","date":"2022-10-28","objectID":"/posts/f092b728/:4:3","tags":["nextcloud","elasticsearch","ubuntu"],"title":"为nextcloud安装elasticsearch全文搜索","uri":"/posts/f092b728/"},{"categories":["软件应用"],"content":"额外的工作 创建elasticsearch的索引服务，并开机自动启动 sudo vi /etc/systemd/system/nextcloud-fulltext-elasticsearch-worker.service 输入如下内容： [Unit] Description=Elasticsearch Worker for Nextcloud Fulltext Search After=network.target [Service] User=www-data Group=www-data WorkingDirectory=/var/www/nextcloud ExecStart=/usr/bin/php /var/www/nextcloud/occ fulltextsearch:live -q ExecStop=/usr/bin/php /var/www/nextcloud/occ fulltextsearch:stop Nice=19 Restart=always [Install] WantedBy=multi-user.target 开机自启动设置： systemctl enable nextcloud-fulltext-elasticsearch-worker.service systemctl start nextcloud-fulltext-elasticsearch-worker.service 全部安装配置完成。 ","date":"2022-10-28","objectID":"/posts/f092b728/:5:0","tags":["nextcloud","elasticsearch","ubuntu"],"title":"为nextcloud安装elasticsearch全文搜索","uri":"/posts/f092b728/"},{"categories":["软件应用"],"content":"这篇文章在office预览方面依然有些问题，需要解决 试过docker、snpa等方式部署nextcloud，但是存在系统匹配、资源占用大等各种问题。而且配置都是写死的，看似安装部署简单，其实折腾起来更痛苦。 尤其是在内网环境里,不涉及升级的问题,手动安装是更好的选择，而且超级简单。 本文假设nextcloud的服务器地址是192.168.8.14 操作系统： ubuntu 22.04 server ","date":"2022-10-12","objectID":"/posts/b924a1ee/:1:0","tags":["nextcloud","debian"],"title":"手动安装Nextcloud","uri":"/posts/b924a1ee/"},{"categories":["软件应用"],"content":"安装apache2、mariadb、php、redis sudo apt update \u0026\u0026 sudo apt upgrade sudo apt install apache2 mariadb-server libapache2-mod-php php-gd php-mysql php-curl php-mbstring php-intl php-gmp php-bcmath php-xml php-imagick php-zip php-readline php-apcu redis-server php-redis ","date":"2022-10-12","objectID":"/posts/b924a1ee/:2:0","tags":["nextcloud","debian"],"title":"手动安装Nextcloud","uri":"/posts/b924a1ee/"},{"categories":["软件应用"],"content":"配置mysql sudo mysql_secure_installation sudo mysql -u root -p 输入密码以登录 创建nextcloud的用户和数据库 CREATE USER 'nextcloud'@'localhost' IDENTIFIED BY '密码'; CREATE DATABASE nextcloud; GRANT ALL PRIVILEGES ON nextcloud.* TO 'nextcloud'@'localhost'; FLUSH PRIVILEGES; QUIT 以上，创建了用户名为nextcloud、密码是自定义的密码、数据库为nextcloud，且用户nextcloud拥有数据库nextcloud所有权限。 ","date":"2022-10-12","objectID":"/posts/b924a1ee/:3:0","tags":["nextcloud","debian"],"title":"手动安装Nextcloud","uri":"/posts/b924a1ee/"},{"categories":["软件应用"],"content":"配置apache 启用apache功能模块 sudo a2enmod rewrite headers env dir mime ssl 新建2个网站配置文件 新建/etc/apache2/sites-available/nextcloud.conf, \u003cIfModule mod_ssl.c\u003e \u003cVirtualHost _default_:443\u003e ServerName 192.168.8.14 DocumentRoot /var/www/nextcloud \u003cDirectory /var/www/nextcloud/\u003e Options +FollowSymlinks AllowOverride All \u003cIfModule mod_dav.c\u003e Dav off \u003c/IfModule\u003e SetEnv HOME /var/www/nextcloud SetEnv HTTP_HOME /var/www/nextcloud \u003c/Directory\u003e \u003cIfModule mod_headers.c\u003e Header always set Strict-Transport-Security \"max-age=15768000; preload\" \u003c/IfModule\u003e SSLEngine on SSLCertificateFile /etc/ssl/certs/ssl-cert-snakeoil.pem SSLCertificateKeyFile /etc/ssl/private/ssl-cert-snakeoil.key \u003c/VirtualHost\u003e \u003c/IfModule\u003e 这是网站的主配置文件,使用了apache自带的证书。 新建 /etc/apache2/sites-available/nextcloud-redirect.conf,内容如下: \u003cVirtualHost *:80\u003e ServerAdmin 192.168.8.14 RewriteEngine On RewriteCond %{HTTPS} off RewriteRule ^(.*)$ https://%{HTTP_HOST}$1 [R=301,L] \u003c/VirtualHost\u003e 这是http到https的跳转配置文件 启用网站配置 sudo a2ensite nextcloud.conf sudo a2ensite nextcloud-redirect.conf #禁用默认的配置文件 sudo a2dissite 000-default.conf ","date":"2022-10-12","objectID":"/posts/b924a1ee/:4:0","tags":["nextcloud","debian"],"title":"手动安装Nextcloud","uri":"/posts/b924a1ee/"},{"categories":["软件应用"],"content":"PHP配置 sudo vim /etc/php/*/apache2/php.ini 找到下面的内容，对应修改。下面是修改后的内容： date.timezone = Asia/Shanghai memory_limit = 2048M upload_max_filesize = 16000M post_max_size = 16128M max_execution_time = 300 post_max_size的值最好比upload_max_filesize大一些。 ","date":"2022-10-12","objectID":"/posts/b924a1ee/:5:0","tags":["nextcloud","debian"],"title":"手动安装Nextcloud","uri":"/posts/b924a1ee/"},{"categories":["软件应用"],"content":"安装nextcloud 下载 wget https://download.nextcloud.com/server/releases/latest-24.zip nextcloud 25版本刚出，app还没适配完成，这里用24版本。 解压 unzip latest-24.zip 下面的操作，是把解压出来的nextcloud放在/var/www/下面,并且修改权限 sudo mv nextcloud /var/www/ sudo chown -R www-data:www-data /var/www/nextcloud 重启apache2 sudo systemctl restart apache2 输入http://192.168.8.14，应该会自动跳转到https://192.168.8.14 , 根据页面提示安装即可. ","date":"2022-10-12","objectID":"/posts/b924a1ee/:6:0","tags":["nextcloud","debian"],"title":"手动安装Nextcloud","uri":"/posts/b924a1ee/"},{"categories":["软件应用"],"content":"优化nextcloud ","date":"2022-10-12","objectID":"/posts/b924a1ee/:7:0","tags":["nextcloud","debian"],"title":"手动安装Nextcloud","uri":"/posts/b924a1ee/"},{"categories":["软件应用"],"content":"设置redis缓存 修改redis配置文件 sudo vim /etc/redis/redis.conf 打到对应位置,修改成下面的配置: port 0 unixsocket /var/run/redis/redis-server.sock unixsocketperm 770 添加用户www-data使用redis的权限 sudo usermod -a -G redis www-data 重启apache sudo systemctl restart apache2 修改nextcloud配置文件 在/var/www/html/nextcloud/config/config.php里添加如下配置: 'memcache.local' =\u003e '\\\\OC\\\\Memcache\\\\Redis', 'memcache.locking' =\u003e '\\\\OC\\\\Memcache\\\\Redis', 'filelocking.enabled' =\u003e 'true', 'redis' =\u003e array ( 'host' =\u003e '/var/run/redis/redis-server.sock', 'port' =\u003e 0, 'timeout' =\u003e 0.0, ), 开机启动redis sudo systemctl enable redis-server ","date":"2022-10-12","objectID":"/posts/b924a1ee/:7:1","tags":["nextcloud","debian"],"title":"手动安装Nextcloud","uri":"/posts/b924a1ee/"},{"categories":["软件应用"],"content":"使用Pretty Links 即隐藏URL中的*.php的内容 修改nextcloud的配置文件: sudo vim /var/www/html/nextcloud/config/config.php 添加如下内容: 'htaccess.RewriteBase' =\u003e '/', 在nextcloud的主目录/var/www/nextcloud下运行命令： sudo -u www-data php occ maintenance:update:htaccess ","date":"2022-10-12","objectID":"/posts/b924a1ee/:7:2","tags":["nextcloud","debian"],"title":"手动安装Nextcloud","uri":"/posts/b924a1ee/"},{"categories":["软件应用"],"content":"PHP Opcache设置 修改php配置文件 sudo vim /etc/php/*/apache2/php.ini 添加如下内容: opcache.enable=1 opcache.enable_cli=1 opcache.interned_strings_buffer=8 opcache.max_accelerated_files=10000 opcache.memory_consumption=128 opcache.save_comments=1 opcache.revalidate_freq=1 ","date":"2022-10-12","objectID":"/posts/b924a1ee/:7:3","tags":["nextcloud","debian"],"title":"手动安装Nextcloud","uri":"/posts/b924a1ee/"},{"categories":["软件应用"],"content":"电话区域和本地服务跳转配置 修改nextcloud的配置文件: sudo vim /var/www/html/nextcloud/config/config.php 添加如下内容: 'default_phone_region' =\u003e 'CN', 'allow_local_remote_servers' =\u003e true, ","date":"2022-10-12","objectID":"/posts/b924a1ee/:7:4","tags":["nextcloud","debian"],"title":"手动安装Nextcloud","uri":"/posts/b924a1ee/"},{"categories":["软件应用"],"content":"Collabora无法在线打开.docx等文档 现象：一直显示“正在加载 xxxx.docx”，但是一直显示不出来。 原因：这是由于系统缺少相关依赖造成的。 解决：根据Collabora官方文档，至少需要下面两个软件 fontconfig、fuse，安装即可 sudo apt install fontconfig fuse ","date":"2022-10-12","objectID":"/posts/b924a1ee/:7:5","tags":["nextcloud","debian"],"title":"手动安装Nextcloud","uri":"/posts/b924a1ee/"},{"categories":["软件应用"],"content":"Collabora无法显示中文字体 解决方法：把需要用到的中文字体，拷贝到/usr/local/share/fonts/目录下。 sudo cp SomeFont.ttf /usr/local/share/fonts/ ","date":"2022-10-12","objectID":"/posts/b924a1ee/:7:6","tags":["nextcloud","debian"],"title":"手动安装Nextcloud","uri":"/posts/b924a1ee/"},{"categories":["软件应用"],"content":"近期重装系统,在安装wsl的时候,由于方法不正确,导致安装的linux运行在wsl1版本,而不是我想要的wsl2。 下面介绍一下正确安装wsl2，并设置wsl2为默认版本的方法，抄自kali官方文档。 win+x a，打开管理员的powershell 依次运行下面命令： 1. Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux 重启windows dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart 重启windows 设置默认版本为wsl2 wsl --set-default-version 2 更新wsl wsl --update 完工。 ","date":"2022-10-08","objectID":"/posts/f68b8b61/:0:0","tags":["windows","wsl"],"title":"正确安装WSL2的方法","uri":"/posts/f68b8b61/"},{"categories":["软件应用"],"content":"wsl安装了多个linux发行版后，主机名统一都是windows的主机名，这导致各个发行版之间不是很好区分。 下面提供一个方法，能够单独修改wsl里的各个linux发行版的主机名，而不必修改windows的主机名。 在/etc目录下新建一个文件wsl.conf，即/etc/wsl.conf,内容如下: [network] # generateHosts = false hostname = kali 上面的文件里,把kali换成你想要的主机名即可。 修改完成后，需要重启wsl方可生效。 wsl --shutdown 再打开wsl里的linux，就能看到效果了。 ","date":"2022-10-08","objectID":"/posts/6b07178d/:0:0","tags":["windows","wsl"],"title":"WSL修改linux发行版的主机名","uri":"/posts/6b07178d/"},{"categories":["操作系统"],"content":" 主要涉及修改的地方有SELinux、Firewall等。 这里以2394端口为例。 ","date":"2022-10-07","objectID":"/posts/583558fa/:0:0","tags":["almalinux","ssh","linux"],"title":"Almalinux8修改默认的SSH端口号","uri":"/posts/583558fa/"},{"categories":["操作系统"],"content":"安装ssh服务 sudo dnf in openssh-server ","date":"2022-10-07","objectID":"/posts/583558fa/:1:0","tags":["almalinux","ssh","linux"],"title":"Almalinux8修改默认的SSH端口号","uri":"/posts/583558fa/"},{"categories":["操作系统"],"content":"修改sshd配置文件 sudo vi /etc/ssh/sshd_config 在#port 22下面新添加一行 Port 2394 ","date":"2022-10-07","objectID":"/posts/583558fa/:2:0","tags":["almalinux","ssh","linux"],"title":"Almalinux8修改默认的SSH端口号","uri":"/posts/583558fa/"},{"categories":["操作系统"],"content":"SELinux里开放端口 semanage port -a -t ssh_port_t -p tcp 2394 查看已经开放的端口 semanage port -l|grep ssh 如果出现ValueError: 没有管理SELinux 策略或者无法访问存储，解决方法在这里。 ","date":"2022-10-07","objectID":"/posts/583558fa/:3:0","tags":["almalinux","ssh","linux"],"title":"Almalinux8修改默认的SSH端口号","uri":"/posts/583558fa/"},{"categories":["操作系统"],"content":"firewall开放端口 firewall-cmd --zone=public --permanent --add-port=2394/tcp 一定要有--zone=public这个参数，不然开放端口后也连接不上。 重载firewall firewall-cmd --reload ","date":"2022-10-07","objectID":"/posts/583558fa/:4:0","tags":["almalinux","ssh","linux"],"title":"Almalinux8修改默认的SSH端口号","uri":"/posts/583558fa/"},{"categories":["操作系统"],"content":"启用ssh服务 systemctl enable ssh ##开机自启动 systemctl restart ssh ##重新启动ssh ","date":"2022-10-07","objectID":"/posts/583558fa/:5:0","tags":["almalinux","ssh","linux"],"title":"Almalinux8修改默认的SSH端口号","uri":"/posts/583558fa/"},{"categories":["操作系统"],"content":"关闭默认的端口 firewall-cmd --permanent --zone=public --remove-port=22/tcp ","date":"2022-10-07","objectID":"/posts/583558fa/:6:0","tags":["almalinux","ssh","linux"],"title":"Almalinux8修改默认的SSH端口号","uri":"/posts/583558fa/"},{"categories":["操作系统"],"content":"重启服务器 连接即可。 ","date":"2022-10-07","objectID":"/posts/583558fa/:7:0","tags":["almalinux","ssh","linux"],"title":"Almalinux8修改默认的SSH端口号","uri":"/posts/583558fa/"},{"categories":["操作系统"],"content":"几个问题的解决 ","date":"2022-10-07","objectID":"/posts/583558fa/:8:0","tags":["almalinux","ssh","linux"],"title":"Almalinux8修改默认的SSH端口号","uri":"/posts/583558fa/"},{"categories":["操作系统"],"content":"第一次可以连接ssh，但以后再连接则不行 问题描述：初次安装完系统后，启动sshd服务，不用修改任何配置，第一次的时候可以直接连接到服务器，以后就不行了。 解决：这个问题出现的根本原因还未深究，但是解决方法很简单： 修改/etc/ssh/sshd_config,把#Port 22前面的#去掉,即改成Port 22即可。 ","date":"2022-10-07","objectID":"/posts/583558fa/:8:1","tags":["almalinux","ssh","linux"],"title":"Almalinux8修改默认的SSH端口号","uri":"/posts/583558fa/"},{"categories":["操作系统"],"content":"已经在firewall-cmd里放行了端口，但还是无法连接 问题描述：一直显示 Connection timed out 解决:这个问题,是由于在放行端口之后,没有执行firewall-cmd --reload造成的。 如果不执行firewall-cmd --reload命令，即使添加端口后显示success,并且重启了服务器,但是firewalld的规则依旧不生效。 所以，切记在添加需要放行的端口后，要执行一次firewall-cmd --reload命令。 ","date":"2022-10-07","objectID":"/posts/583558fa/:8:2","tags":["almalinux","ssh","linux"],"title":"Almalinux8修改默认的SSH端口号","uri":"/posts/583558fa/"},{"categories":["操作系统"],"content":"semanage命令找不到 安装下面软件包即可 dnf in policycoreutils-python-utils ","date":"2022-10-07","objectID":"/posts/583558fa/:8:3","tags":["almalinux","ssh","linux"],"title":"Almalinux8修改默认的SSH端口号","uri":"/posts/583558fa/"},{"categories":["操作系统"],"content":"almalinux最小化安装默认的几个软件 最小化安装的almalinux,默认安装了openssh、openssh-server、firewall-cmd、firewalld，对于管理来说，只需要再安装上述的semanage即可。很是贴心和方便。 ","date":"2022-10-07","objectID":"/posts/583558fa/:8:4","tags":["almalinux","ssh","linux"],"title":"Almalinux8修改默认的SSH端口号","uri":"/posts/583558fa/"},{"categories":["操作系统"],"content":"为了服务器的安全性考虑,rhel系列默认会启用的SELinux最好不要关闭。 这也导致了一些坑的出现,下面记录一下解决方法。 ","date":"2022-10-07","objectID":"/posts/9a31e845/:0:0","tags":["almalinux","selinux","ssh"],"title":"SELinux相关问题的解决","uri":"/posts/9a31e845/"},{"categories":["操作系统"],"content":"更改SSH端口号后,ssh服务无法启动 这个问题是因为selinux里，只默认开放了22端口。如果只在/etc/ssh/sshd_config里修改了端口号，就会出现上面的问题。 ","date":"2022-10-07","objectID":"/posts/9a31e845/:1:0","tags":["almalinux","selinux","ssh"],"title":"SELinux相关问题的解决","uri":"/posts/9a31e845/"},{"categories":["操作系统"],"content":"解决方法 在selinux里开放对应的端口号,这里以2394为例： semanage port -a -t ssh_port_t -p tcp 2394 详细改端口的教程看这里. ","date":"2022-10-07","objectID":"/posts/9a31e845/:1:1","tags":["almalinux","selinux","ssh"],"title":"SELinux相关问题的解决","uri":"/posts/9a31e845/"},{"categories":["操作系统"],"content":"ValueError: 没有管理SELinux 策略或者无法访问存储 这个问题的详细解释看这里。 大体意思是：由于SELinux版本升级，新版本的SELinux的策略模型存储在/var/lib/selinux，而不是之前的/etc/selinux里。 由于各方面的原因（主要是 portage_t域名必须被移除），SELinux在版本升级的时候，并不会自动修改这个存储路径，需要手动进行修改。 作者也说了，出现上面的错误，并不意味着系统崩坏，也不会影响SELinux正常起作用，只会影响 semanage或者setsebool这些工具的使用。 而且手动修改只需要运行一次就可以了。 ","date":"2022-10-07","objectID":"/posts/9a31e845/:2:0","tags":["almalinux","selinux","ssh"],"title":"SELinux相关问题的解决","uri":"/posts/9a31e845/"},{"categories":["操作系统"],"content":"解决方法 重建一下SELinux的存储路径 /usr/libexec/selinux/semanage_migrate_store 删除旧的策略模型： rm -rf /etc/selinux/mcs/modules 重启服务器就可以了。 ","date":"2022-10-07","objectID":"/posts/9a31e845/:2:1","tags":["almalinux","selinux","ssh"],"title":"SELinux相关问题的解决","uri":"/posts/9a31e845/"},{"categories":["操作系统"],"content":"最近在wsl里用kali。 由于wsl里的kali只提供了一个最基本的环境，python2、python3、pip2、pip3都需要自己安装，这里记录一下安装方法。 ","date":"2022-10-05","objectID":"/posts/0b636d39/:0:0","tags":["linux","python","pip"],"title":"Kali下python2 Python3 Pip的安装","uri":"/posts/0b636d39/"},{"categories":["操作系统"],"content":"python3和pip3 sudo apt install python3 python3-dev python3-pip ","date":"2022-10-05","objectID":"/posts/0b636d39/:1:0","tags":["linux","python","pip"],"title":"Kali下python2 Python3 Pip的安装","uri":"/posts/0b636d39/"},{"categories":["操作系统"],"content":"python2和pip2 ","date":"2022-10-05","objectID":"/posts/0b636d39/:2:0","tags":["linux","python","pip"],"title":"Kali下python2 Python3 Pip的安装","uri":"/posts/0b636d39/"},{"categories":["操作系统"],"content":"python2安装 sudo apt install python2 python2-dev ","date":"2022-10-05","objectID":"/posts/0b636d39/:2:1","tags":["linux","python","pip"],"title":"Kali下python2 Python3 Pip的安装","uri":"/posts/0b636d39/"},{"categories":["操作系统"],"content":"pip2安装 wget https://bootstrap.pypa.io/pip/2.7/get-pip.py sudo python2 get-pip.py 这样，在使用的时候，只需要输入python2、pip2和python3、pip3即可。 ","date":"2022-10-05","objectID":"/posts/0b636d39/:2:2","tags":["linux","python","pip"],"title":"Kali下python2 Python3 Pip的安装","uri":"/posts/0b636d39/"},{"categories":["操作系统"],"content":"后记 如果想输入python的时候，默认调用python3,可以安装python-is-python3这个软件包 sudo apt install python-python3 ","date":"2022-10-05","objectID":"/posts/0b636d39/:3:0","tags":["linux","python","pip"],"title":"Kali下python2 Python3 Pip的安装","uri":"/posts/0b636d39/"},{"categories":["操作系统"],"content":"问题 在windows server 2022里，OneDrive可以正常安装使用，但是缺少了一项功能： 由于我把大量的绿色软件放在OneDrive里进行同步，在重装系统的时候，如果没有这个功能，所有软件得一个一个同步，就太麻烦了。 ","date":"2022-10-03","objectID":"/posts/584fb855/:1:0","tags":["windows","onedrive"],"title":"解决Windows Server 2022里OneDrive的同步问题","uri":"/posts/584fb855/"},{"categories":["操作系统"],"content":"解决 一番搜索，找到了解决方法： 修改安全配置 win+R，输入secpol.msc，选择 本地策略»安全选项»右边策略栏拉至用户账户控制相关配置，修改3个选项如下图： 重置 OneDrive 打开CMD，输入下面命令： C：\\Program Files\\Microsoft OneDrive\\onedrive.exe /reset 重启之后，看到熟悉的始终(A)保留在此设备上就回来了。 ","date":"2022-10-03","objectID":"/posts/584fb855/:2:0","tags":["windows","onedrive"],"title":"解决Windows Server 2022里OneDrive的同步问题","uri":"/posts/584fb855/"},{"categories":["软件应用"],"content":"问题 新版本的burpsuite在启动后，会根据系统的分辨率设置情况自动进行缩放，这带来2个问题： 字体界面变得模糊 在reapter等界面中，选择字体时鼠标会乱动，导致选不准。 ","date":"2022-09-27","objectID":"/posts/5f34e294/:1:0","tags":["burpsuite","font"],"title":"解决burpsuite在高分屏上字体模糊的问题","uri":"/posts/5f34e294/"},{"categories":["软件应用"],"content":"解决 要解决要很简单，在burpsuite的启动命令中加上下面的参数即可： -Dsun.java2d.uiScale=1 完整的命令类似于下面： java --illegal-access=permit -Dfile.encoding=utf-8 -noverify -Dsun.java2d.uiScale=1 -javaagent:BurpSuiteLoader.jar -jar burpsuite_pro_org.jar 重启后，需要在User options–\u003eDisplay中把字体调大，一般4K屏20号字体比较不错。 还有一个好处是,render中的字体也不再模糊了。 另外等宽字体推荐使用更纱黑体 mono sc nerd ","date":"2022-09-27","objectID":"/posts/5f34e294/:2:0","tags":["burpsuite","font"],"title":"解决burpsuite在高分屏上字体模糊的问题","uri":"/posts/5f34e294/"},{"categories":["操作系统"],"content":" kali在2020.4版本后,已经将zsh设置成了默认终端。 但在一些特殊的环境下,比如wsl2里的kali,仍然使用的是bash ","date":"2022-09-24","objectID":"/posts/e9b31c18/:0:0","tags":["zsh","linux","terminal"],"title":"Kali安装zsh及常用插件","uri":"/posts/e9b31c18/"},{"categories":["操作系统"],"content":"查看当前默认系统shell echo $SHELL ","date":"2022-09-24","objectID":"/posts/e9b31c18/:1:0","tags":["zsh","linux","terminal"],"title":"Kali安装zsh及常用插件","uri":"/posts/e9b31c18/"},{"categories":["操作系统"],"content":"安装zsh和oh-my-zsh ","date":"2022-09-24","objectID":"/posts/e9b31c18/:2:0","tags":["zsh","linux","terminal"],"title":"Kali安装zsh及常用插件","uri":"/posts/e9b31c18/"},{"categories":["操作系统"],"content":"zsh sudo apt install zsh ","date":"2022-09-24","objectID":"/posts/e9b31c18/:2:1","tags":["zsh","linux","terminal"],"title":"Kali安装zsh及常用插件","uri":"/posts/e9b31c18/"},{"categories":["操作系统"],"content":"oh-my-zsh sh -c \"$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\" 需要系统中有curl和git 安装完oh-my-zsh后，会自动提示是否切换到zsh。 如果没有提示切换系统shell，使用chsh -s /bin/zsh来切换。 ","date":"2022-09-24","objectID":"/posts/e9b31c18/:2:2","tags":["zsh","linux","terminal"],"title":"Kali安装zsh及常用插件","uri":"/posts/e9b31c18/"},{"categories":["操作系统"],"content":"安装zsh常用插件 最有用的就是3个： 高亮插件zsh-syntax-highlighting、 自动实例插件zsh-autosuggestions、 跳转插件autojump 在debian或者kali下，这3个插件都有对应的软件包，直接安装即可。 其它linux，如果没有对应的软件包，可以用下面手动安装的方式。 ","date":"2022-09-24","objectID":"/posts/e9b31c18/:3:0","tags":["zsh","linux","terminal"],"title":"Kali安装zsh及常用插件","uri":"/posts/e9b31c18/"},{"categories":["操作系统"],"content":"zsh-syntax-highlighting cd $ZSH/custom/plugins git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ","date":"2022-09-24","objectID":"/posts/e9b31c18/:3:1","tags":["zsh","linux","terminal"],"title":"Kali安装zsh及常用插件","uri":"/posts/e9b31c18/"},{"categories":["操作系统"],"content":"zsh-autosuggestions cd $ZSH/custom/plugins git clone https://github.com/zsh-users/zsh-autosuggestions.git ","date":"2022-09-24","objectID":"/posts/e9b31c18/:3:2","tags":["zsh","linux","terminal"],"title":"Kali安装zsh及常用插件","uri":"/posts/e9b31c18/"},{"categories":["操作系统"],"content":"autojump sudo apt install autojump ","date":"2022-09-24","objectID":"/posts/e9b31c18/:3:3","tags":["zsh","linux","terminal"],"title":"Kali安装zsh及常用插件","uri":"/posts/e9b31c18/"},{"categories":["操作系统"],"content":"配置启用插件 除了上面的插件，还有几个插件建议一起启用，都是oh-my-zsh自带的： z extract safe-paste 打开~/.zshrc，找到plugins=(git)这一行，修改成下面的内容： plugins=(git autojump zsh-autosuggestions zsh-syntax-highlighting z safe-paste extract) ","date":"2022-09-24","objectID":"/posts/e9b31c18/:4:0","tags":["zsh","linux","terminal"],"title":"Kali安装zsh及常用插件","uri":"/posts/e9b31c18/"},{"categories":["操作系统"],"content":"配置文件生效 终端下运行命令: source ~/.zshrc ","date":"2022-09-24","objectID":"/posts/e9b31c18/:5:0","tags":["zsh","linux","terminal"],"title":"Kali安装zsh及常用插件","uri":"/posts/e9b31c18/"},{"categories":["硬件设备"],"content":" 一直以来，对于27寸4K的显示，都是使用windows 10默认推荐的150%的缩放。 直到今天才发现,这是错的。 ","date":"2022-09-12","objectID":"/posts/c609f2d7/:0:0","tags":["显示器"],"title":"27寸4K显示器的缩放比例研究","uri":"/posts/c609f2d7/"},{"categories":["硬件设备"],"content":"显示器的尺寸、分辨率和PPI 先说一个知识：在Windows中，100%缩放比例实际对应的是ppi和dpi同为96的情况。 对于高分屏来说，windows 10默认的那几个缩放比例，比如27寸4k默认推荐的150%，在缩放后对应的DPI其实都不是96。 这就导致了在缩放后出现的一个问题：一些软件的UI出现了错位或者字体过小。 ","date":"2022-09-12","objectID":"/posts/c609f2d7/:1:0","tags":["显示器"],"title":"27寸4K显示器的缩放比例研究","uri":"/posts/c609f2d7/"},{"categories":["硬件设备"],"content":"如何正确计算缩放比例 这里还是以27寸4K显示器来举例，它的PPI约为163,用163除以96,得出的结果约为169%。那么这个169就是你应该设置的缩放比例。 也就是说，缩放比例应该以缩放后DPI仍为96为标准来设置。这样的好处是屏幕的UI尺寸以及软件内文档尺寸符合原有设计尺寸。 ","date":"2022-09-12","objectID":"/posts/c609f2d7/:2:0","tags":["显示器"],"title":"27寸4K显示器的缩放比例研究","uri":"/posts/c609f2d7/"},{"categories":["硬件设备"],"content":"对比150%缩放的实际感受 设置为169%的缩放后，系统字体大小变得更合适了，一些软件的UI也不会出现菜单字体过小的问题。字体美化后也变得更加好看了。 比如cobalstrike,使用150%缩放经常会出现客户端登录界面空白的现象,而在使用169%缩放后,再也没有出现了。 ","date":"2022-09-12","objectID":"/posts/c609f2d7/:3:0","tags":["显示器"],"title":"27寸4K显示器的缩放比例研究","uri":"/posts/c609f2d7/"},{"categories":["网络相关"],"content":"前文说过，我使用hugo的page bundle的方式来组织整个网站，并且使用vscode来编辑和管理网站。 vscode有一个荒野无灯大佬开发的名为hugofy的插件，这个插件可以很好的支持page bundle模式。 以前使用这个插件一直正常，今天下载了新的0.101版本的hugo，在使用这个插件新建文章时，却提示Error: could not determine content directory for \"/posts/xxx.md\"。 网上搜索了半天，也没发现有用的信息，最后突然想到，会不会是hugo版本的问题呢？ 于是下载了hugo的0.84版本，再一试，果然一切正常了。 ","date":"2022-08-29","objectID":"/posts/5b6e3a97/:0:0","tags":["hugo","vscode"],"title":"Hugofy新建文章出现错误的解决方法","uri":"/posts/5b6e3a97/"},{"categories":["网络相关"],"content":"这几天黑苹果终于是折腾完美了，但是有一个问题： 在黑苹果里打开网页非常的慢，而且打开网站后，再点击网站里的链接也是非常慢。 切换到Windows系统里测试了一上，快了一点，但是也没有达到秒开的地步。 这是非常不应该的。我家里的是千兆宽带，打开的也是sohu、ifeng之类的大站，DNS用的也是114，怎么会打开个网页也慢呢？ 作为一个网络行业相关人员，第一时间就怀疑到了DNS上。 家里用的是软路由，使用的是ikuai虚拟机。一番折腾后，找到了问题的答案。 在ikuai-网络设置-DNS设置里，有一个DNS加速模式。 我原本的设置是代理模式（DoH:DNS Over Https）,把它改成代理模式（UDP)就可以了。 这样打开任何国内的大站，都是秒开的效果。 问题解决。 ","date":"2022-08-29","objectID":"/posts/f86cf3fe/:0:0","tags":["DNS","软路由"],"title":"IKuai的DNS设置","uri":"/posts/f86cf3fe/"},{"categories":["软件应用"],"content":"两个步骤，非常简单，看图： 需要注意的是，vmware workstation在选择导出时，只能选择ovf格式，不是想要的ova格式。 这时只需要在保存时，手动把ovf后缀改成ova，这样导出的就是ova格式了。 ","date":"2022-07-17","objectID":"/posts/f1fa0209/:0:0","tags":["vmware"],"title":"Vmware Workstation导出ova格式的虚拟机","uri":"/posts/f1fa0209/"},{"categories":["软件应用"],"content":"长久以来，在 Linux 使用 vmware 总是有个问题没有解决。 当在 Linux 里把 Ctrl 和 CapsLock 这两个键互换后，vmware 的虚拟机里并不会跟着一起换，而依旧是原来的键位。而同样的问题在 Windows 下就不存在。 vmware 的官方文档解释： Workstation Player 可通过检查当前的 X 键映射确定要使用的表。但这种决策过程有时也会失败。另外，每个映射都是固定的，不保证对任何给定的键盘和 X 按键代码-键盘符号映射都正确无误。例如，如果用户使用 xmodmap 互换 Ctrl 和 CapsLock 按键，那么在使用远程服务器时虚拟机中的按键将互换（键盘符号映射），但在使用本地服务器时将取消互换（按键代码映射）。为了修正此问题，您必须在 Workstation Player 中重新映射按键。 也就是说，在本机上修改了键位后，远程连接到 vmware 虚拟机里是正常的，但是在本机上的虚拟机里则不能使用。 ","date":"2022-07-16","objectID":"/posts/846f01f3/:0:0","tags":["vmware","键盘"],"title":"Vmware在Linux作为Host下的键盘映射的问题","uri":"/posts/846f01f3/"},{"categories":["软件应用"],"content":"解决方案 官方给出的解决方案是： ","date":"2022-07-16","objectID":"/posts/846f01f3/:1:0","tags":["vmware","键盘"],"title":"Vmware在Linux作为Host下的键盘映射的问题","uri":"/posts/846f01f3/"},{"categories":["软件应用"],"content":"查看特定键位的值 使用xev或者xmodmap -pk查看 Ctrl 和 CapsLock 的键位值 可以看出，left Ctrl 键的值是 66,而 CapsLock 键的值是 37 ","date":"2022-07-16","objectID":"/posts/846f01f3/:1:1","tags":["vmware","键盘"],"title":"Vmware在Linux作为Host下的键盘映射的问题","uri":"/posts/846f01f3/"},{"categories":["软件应用"],"content":"查看键位对应的 V-Scan 值 需要到V-Scan Code Table去查看。 这里直接告诉大家： Left Ctrl 的值是 0x01d CapsLock 的值是 0x03a ","date":"2022-07-16","objectID":"/posts/846f01f3/:1:2","tags":["vmware","键盘"],"title":"Vmware在Linux作为Host下的键盘映射的问题","uri":"/posts/846f01f3/"},{"categories":["软件应用"],"content":"添加配置文件 在~/.vmware/config（没有就新建一个）里添加如下配置： xkeymap.keycode.66 = 0x01d xkeymap.keycode.37 = 0x03a 至此，工作全部完成，vmware 里的虚拟机可以使用和 Host 一样的键位设置了。 ","date":"2022-07-16","objectID":"/posts/846f01f3/:1:3","tags":["vmware","键盘"],"title":"Vmware在Linux作为Host下的键盘映射的问题","uri":"/posts/846f01f3/"},{"categories":["软件应用"],"content":"踩过的大坑 这么简单的一个问题，官方文档有明确的说明了，为什么拖了好几年没解决呢？ 主要问题有两个： 官方的文档里说，更改健位值的两行代码，加在虚拟机配置文件里(.vmx)或者~/.vmware/config都可以，其实不对。这两行代码只能加在~/.vmware/config，加在其他地方不起作用。这个坑是长期未解决此问题的主要原因。 添加这两行配置后，必须重新启动系统，以便让修改生效。 ","date":"2022-07-16","objectID":"/posts/846f01f3/:1:4","tags":["vmware","键盘"],"title":"Vmware在Linux作为Host下的键盘映射的问题","uri":"/posts/846f01f3/"},{"categories":["操作系统"],"content":"作为kde默认的登录管理器，SDDM居然不能在kde控制中心里设置HiDPI。 一番搜索后，找到了下面的解决方法： 新建一个文件 /etc/sddm.conf,添加下面内容： [X11] ServerArguments=-nolisten tcp -dpi 144 这里的144对应着150%的缩放,重启即可生效。 ","date":"2022-07-16","objectID":"/posts/48990398/:0:0","tags":["kde","ubuntu","linux"],"title":"Kubuntu 22.04设置sddm使用HiDPI","uri":"/posts/48990398/"},{"categories":["软件应用"],"content":" TrueColor就是24位的真彩色 软件版本： tmux：3.2 vim ：8.2 ","date":"2022-07-09","objectID":"/posts/4d263cb0/:0:0","tags":["tmux","vim","theme"],"title":"让tmux和vim支持TrueColor","uri":"/posts/4d263cb0/"},{"categories":["软件应用"],"content":"修改终端的类型 终端的类型可以用 echo $TERM来确认。 默认情况下，linux系统的shell用的终端类型是 xterm，tmux用的终端类型是 screen-256color。 我们需要全部修改成 xterm-256color才能使TrueColor生效。 secreen-256最大的缺点是不支持斜体字。 ","date":"2022-07-09","objectID":"/posts/4d263cb0/:1:0","tags":["tmux","vim","theme"],"title":"让tmux和vim支持TrueColor","uri":"/posts/4d263cb0/"},{"categories":["软件应用"],"content":"修改系统shell的终端类型 假设用的是 zsh，则修改 .zshrc，在最后添加一行： export TERM=\"xterm-256color\" 然后 source .zshrc生效。 ","date":"2022-07-09","objectID":"/posts/4d263cb0/:1:1","tags":["tmux","vim","theme"],"title":"让tmux和vim支持TrueColor","uri":"/posts/4d263cb0/"},{"categories":["软件应用"],"content":"修改tmux的终端类型 打开tmux的配置文件 ~/.tmux.conf 添加下面两行： # 设置 tmux 的终端为xterm-256color set -g default-terminal \"xterm-256color\" # 开启 tmux 的终端的ture color支持 set-option -ga terminal-overrides \",xterm-256color:Tc\" ","date":"2022-07-09","objectID":"/posts/4d263cb0/:1:2","tags":["tmux","vim","theme"],"title":"让tmux和vim支持TrueColor","uri":"/posts/4d263cb0/"},{"categories":["软件应用"],"content":"vim支持TrueColor设置 在~/.vimrc里添加下面一行 set termguicolors \" 开启ture color,无需再设置set t_Co=256 这样就可以了。 ","date":"2022-07-09","objectID":"/posts/4d263cb0/:2:0","tags":["tmux","vim","theme"],"title":"让tmux和vim支持TrueColor","uri":"/posts/4d263cb0/"},{"categories":["软件应用"],"content":"TrueColor设置生效 以上修改操作做完后，需要 退全部的tmux的session 断开远程连接，重新登录 这样才能生效。 下面是在tmux里使用vim的截图，vim主题使用的是gruvbox: ","date":"2022-07-09","objectID":"/posts/4d263cb0/:3:0","tags":["tmux","vim","theme"],"title":"让tmux和vim支持TrueColor","uri":"/posts/4d263cb0/"},{"categories":["软件应用"],"content":"最近在学习C语言编程，准备采用下面方法： windows 10的主机，装一台 kubuntu 22.04的虚拟机 windows下使用远程工具连接到虚拟机。 使用 vim来编辑和编译。 据说这是大厂常用的工作流程 远程连接工具其实没有太多的选择，常用的也就三个：Xshell、SecureCRT、MobaXterm。 这三个我都用过，总是因为某些原因从一个换到另一个，具体什么原因自己都忘了。这次在远程连接到虚拟机上配置vim的时候，才发现了Xshell的强大和方便之处。难怪有那么多人推荐Xshell。 三款终端使用的版本号如下：Xshell 7、MobaXterm 22.1、SecureCRT 8.5 \u0026 9.2 ","date":"2022-07-08","objectID":"/posts/e2c210ef/:0:0","tags":["xshell","terminal","linux"],"title":"Xshell确实好用","uri":"/posts/e2c210ef/"},{"categories":["软件应用"],"content":"一、TrueColor的支持 所谓的 TrueColor，也就是24位真彩色，这个色彩在物理显示器上，也就是2000年初的水平。 但是在终端上，多年流行的都是 xterm 256的颜色，直到最近几年才有终端开始支持。 其实xterm 256也够用了 对于 TrueColor的支持情况，三款终端如下： MobaXterm：支持 SecureCRT：8.7版本之后支持 Xshell ：支持 ","date":"2022-07-08","objectID":"/posts/e2c210ef/:1:0","tags":["xshell","terminal","linux"],"title":"Xshell确实好用","uri":"/posts/e2c210ef/"},{"categories":["软件应用"],"content":"（一）打开Xshell 7的TrueColor支持 工具—\u003e选项—\u003e高级—\u003e终端—\u003e选中\"使用本色”，就可以了。如下图： ","date":"2022-07-08","objectID":"/posts/e2c210ef/:1:1","tags":["xshell","terminal","linux"],"title":"Xshell确实好用","uri":"/posts/e2c210ef/"},{"categories":["软件应用"],"content":"二、斜体的显示支持 我使用的 vim主题叫 gruvbox，这个主题可以打开斜体显示功能。默认情况下注释内容会用斜体显示。 同样的.vimrc配置文件，在 SecureCRT和 MobaXterm里，都没有办法打开斜体显示，而 Xshell显示正常： 三、Zmodem支持 Zmodem，简单来说就是可以使用 sz、rz命令从远程主机和本地主机之间传输文件。 Xshell和 SecureCRT默认支持，MobaXterm需要安装插件才支持。 其实 Xshell有 xftp，SecureCRT有 SecureFX，MobaXterm在连到远程主机时也会自动打开一个sftp传输窗口，都可以替代 Zmodem的功能。 但是有 Zmodem支持总是好的，可以很方便的传输一些配置文件。 ","date":"2022-07-08","objectID":"/posts/e2c210ef/:2:0","tags":["xshell","terminal","linux"],"title":"Xshell确实好用","uri":"/posts/e2c210ef/"},{"categories":["软件应用"],"content":"四、多主机同时运行相同命令 这个功能在做运维的时候，同时管理多台主机很有用。 Xshell按下 ALT+e,就可以把命令同时在所有打开并连接的远程主机中执行了。 SecureCRT有也类似的功能，但是不如 Xshell方便。 MobaXterm没有试过。 ","date":"2022-07-08","objectID":"/posts/e2c210ef/:3:0","tags":["xshell","terminal","linux"],"title":"Xshell确实好用","uri":"/posts/e2c210ef/"},{"categories":["软件应用"],"content":"五、总结 网上有这么多人推荐 Xshell，不是没有原因。 很多功能，在你没用到之前，会觉得所有远程终端都一样。 很多想要功能，在没踩过坑前，不会知道它有没有实现。 目前为止，Xshell是最满足我需要的一个远程终端程序了。 如果没有特殊原因，以后不会再换了。 ","date":"2022-07-08","objectID":"/posts/e2c210ef/:4:0","tags":["xshell","terminal","linux"],"title":"Xshell确实好用","uri":"/posts/e2c210ef/"},{"categories":["硬件设备"],"content":"前段时间玩黑苹果的时候，买了一块罗技的MX KEYS的键盘。不得不说，这块键盘是真的好用，windows和Mac双系统兼容，手感超级好，比我的IKBC的红轴机械键盘用起来都要舒服。 因为这块键盘使用的是优联技术，因此想着再买一个同样使用优联技术的鼠标，这样可以鼠标键盘使用一个接收器就好了。 因此趁着618，京东157入手了一个罗技M720鼠标。 买回来之后才发现，还是太想当然了。 M720这个鼠标有几个问题： 重量沉。现在用的是罗技G304，重量非常合适。M720太沉了 太小了。宽度还可以，长度不够。用起来后掌心的位置感觉是悬空的。 无法和键盘使用同一个优联接收器。买这个鼠标最主要的目的就是省一个优联接收器。结果发现键盘和鼠标还是只能使用各自优联接收器。 有异响。晃了一下，有明显的声音，感觉有东西没固定住一样。 因为以上问题，这个M720退货了。 还是罗技的G304适合我，重量、大小、手感都非常合适。 ","date":"2022-06-19","objectID":"/posts/cf80e189/:0:0","tags":["鼠标"],"title":"罗技M720鼠标使用感受","uri":"/posts/cf80e189/"},{"categories":[],"content":"最近发现,文章最后的更新于时间和文章创建的时间是一致的,这就毫无意义了,于是开始着手解决。 没想到的是，这是个大工程。 中间涉及的环节太多，有点复杂。目前的成果是使用文档修改的时间做为更新时间。 经过测试，文档修改时间还是不行，目前尚不清楚是为什么 ","date":"2022-05-29","objectID":"/posts/bfaf5ee9/:0:0","tags":[],"title":"Hugo使用正确的自动更新时间","uri":"/posts/bfaf5ee9/"},{"categories":["网络相关"],"content":"hugo博客部署在github page上。 最近几天发现，博客的文章和disqus评论都是正常的，唯独涉及图片的部分，一直显示Loading加载不出来。 一番查找后，发现锅在LoveIt主题上，确切的说，是在LoveIt主题使用的cdn–https://cdn.jsdelivr.net上。 ","date":"2022-05-28","objectID":"/posts/da4fb9f9/:0:0","tags":["hugo","theme","cdn"],"title":"解决Hugo网站使用LoveIt主题后图片刷新不出来的问题","uri":"/posts/da4fb9f9/"},{"categories":["网络相关"],"content":"问题的根源 LoveIt主题使用的图片加载技术叫lazysizes ，它的官方解释说明是这样的： 基于lazysizes自动转换图片为懒加载 我的理解是，lazysizes可以自动把图片压缩成设置好的大小，并且按需加载。这样就能够加快网页的打开速度了。 lazysizes依赖的核心js是 lazysizes.min.js。 而 lazysizes.min.js存放于https://cdn.jsdelivr.net上。如果https://cdn.jsdelivr.net出现访问问题，图片自然也就加载不出来。 公共CDN属于基础网络设施，全球有大量的项目依赖于它，一般不会出现问题。 很不幸的是，这次恰恰就是https://cdn.jsdelivr.net出现了问题，而且好像只有在中国大陆出现了问题。 更进一步，是只有移动、电信的网络出现了问题，联通访问还是正常的（我为什么会知道？因为我有电信、联通、移动三网的环境😛）。 这就是此次Hugo网站加载不出来图片的根本原因。 ","date":"2022-05-28","objectID":"/posts/da4fb9f9/:1:0","tags":["hugo","theme","cdn"],"title":"解决Hugo网站使用LoveIt主题后图片刷新不出来的问题","uri":"/posts/da4fb9f9/"},{"categories":["网络相关"],"content":"解决方法 知道问题根源了,解决方法也很简单–换一个cdn就可以了。 最简单的方法是： 还是使用jsdelivr.net的cdn，但是换一个域名，目前gcore.jsdelivr.net这个域名是可以使用的。 具体步骤： 编辑文件 themes\\LoveIt\\assets\\data\\cdn\\jsdelivr.yml 修改第二行,原来是: libFiles: https://cdn.jsdelivr.net/npm/ 修改为: libFiles: https://gcore.jsdelivr.net/npm/ 问题解决。 ","date":"2022-05-28","objectID":"/posts/da4fb9f9/:2:0","tags":["hugo","theme","cdn"],"title":"解决Hugo网站使用LoveIt主题后图片刷新不出来的问题","uri":"/posts/da4fb9f9/"},{"categories":["软件应用"],"content":" 笔记软件有很多,优秀的也不少。想找一个符合自己要求的跨平台笔记方案，难点在于跨平台这三个字，更确切的说是能够兼顾Linux平台。 历经一番波折，期间换来换去，最终找到了坚果云+Joplin这个终极跨平台笔记解决方案。 ","date":"2022-05-28","objectID":"/posts/3e939557/:0:0","tags":["坚果云","joplin","linux"],"title":"我的跨平台笔记方案-坚果云+Joplin","uri":"/posts/3e939557/"},{"categories":["软件应用"],"content":"坚果云 坚果云可以说是所有网盘中对Linux的支持最优秀的了。 坚果云的Linux客户端拥有和windows、Mac下客户端完全一致的功能。 和Drobox相比，坚果云没有用户数的限制，只有流量限制。这个限制就很聪明，用来同步一些小文件完全够用，将来需要大空间了再花钱，也不贵。 ","date":"2022-05-28","objectID":"/posts/3e939557/:1:0","tags":["坚果云","joplin","linux"],"title":"我的跨平台笔记方案-坚果云+Joplin","uri":"/posts/3e939557/"},{"categories":["软件应用"],"content":"Joplin Joplin是开源笔记软件的后起之秀，最大的优势是笔记可完全个人拥有。 和一些商业公司锁格式、锁导出等恶心行为相比，Joplin完全是笔记软件的清流，这也是为什么我喜欢开源软件。 Joplin的功能非常完备，支持图片、视频、表格、Markdown、代码、网页捕捉等，满足记笔记的一且需求。 ","date":"2022-05-28","objectID":"/posts/3e939557/:2:0","tags":["坚果云","joplin","linux"],"title":"我的跨平台笔记方案-坚果云+Joplin","uri":"/posts/3e939557/"},{"categories":["软件应用"],"content":"整合方案 简单来说，就是坚果云开启WebDAV，然后把Joplin的笔记同步到坚果云的WebDAV里。 因为坚果云和Joplin都是全平台的，所有也就达成了跨平台体验一致的记笔记解决方案。 ","date":"2022-05-28","objectID":"/posts/3e939557/:3:0","tags":["坚果云","joplin","linux"],"title":"我的跨平台笔记方案-坚果云+Joplin","uri":"/posts/3e939557/"},{"categories":["软件应用"],"content":"问题和解决 ","date":"2022-05-28","objectID":"/posts/3e939557/:4:0","tags":["坚果云","joplin","linux"],"title":"我的跨平台笔记方案-坚果云+Joplin","uri":"/posts/3e939557/"},{"categories":["软件应用"],"content":"KDE下坚果云登录界面太小的问题 主要体现在登录界面太小，以至于无法显示登录框的问题。 解决方法： 1、右键点击登录界面的标题栏–更多操作–配置特殊窗口设置 2、点击左下角 添加属性 3、在弹出的 添加属性到规则中，选择 最小尺寸 4、选择强制，然后设置想要的大小，建设设置500以上，我这里是1008x1061 ","date":"2022-05-28","objectID":"/posts/3e939557/:4:1","tags":["坚果云","joplin","linux"],"title":"我的跨平台笔记方案-坚果云+Joplin","uri":"/posts/3e939557/"},{"categories":["软件应用"],"content":"Joplin同步到坚果云的正确方法 默认的话，Joplin通过WebDAV同步到坚果云会报错，大体意思是 太多的连接这个错误。 解决方法： 首先在坚果云里新建一个个人同步文件夹，命名为“Joplin\"，然后在软件设置的webdav地址里填入： https://dav.jianguoyun.com/dav/Joplin 其他照旧就可以了。 ","date":"2022-05-28","objectID":"/posts/3e939557/:4:2","tags":["坚果云","joplin","linux"],"title":"我的跨平台笔记方案-坚果云+Joplin","uri":"/posts/3e939557/"},{"categories":["硬件设备"],"content":"键盘型号是IKBC W210无线机械键盘。 ","date":"2022-03-09","objectID":"/posts/c0dac05c/:0:0","tags":["键盘"],"title":"解决键盘上的Windows快捷键失灵的问题","uri":"/posts/c0dac05c/"},{"categories":["硬件设备"],"content":"问题 最近两天,忽然发现键盘上的Windows快捷键不起作用了。 Windows 10最让我满意的地方就是它的快捷键了，而这些快捷键大部分是以Win开头的。 没有了快捷键，Windows 10仿佛失去了灵魂。 ","date":"2022-03-09","objectID":"/posts/c0dac05c/:1:0","tags":["键盘"],"title":"解决键盘上的Windows快捷键失灵的问题","uri":"/posts/c0dac05c/"},{"categories":["硬件设备"],"content":"解决过程 一开始以为是Windows 10的三月更新引起的。网上搜索了一下，没有发现反映相关问题的。 于是以“Windows键盘不起作用”为关键字搜索，最终在短乎上一篇反映阿米洛机械键盘的帖子上找到了答案： ","date":"2022-03-09","objectID":"/posts/c0dac05c/:2:0","tags":["键盘"],"title":"解决键盘上的Windows快捷键失灵的问题","uri":"/posts/c0dac05c/"},{"categories":["硬件设备"],"content":"解决方法 其实是我不小心把Windows快捷键给禁用了，附上解决方法 锁定方法 ：fn + 左win 解锁方法： fn + 右win 尽管是针对阿米洛机械键盘的，但是对IKBC W210同样起作用。 ","date":"2022-03-09","objectID":"/posts/c0dac05c/:3:0","tags":["键盘"],"title":"解决键盘上的Windows快捷键失灵的问题","uri":"/posts/c0dac05c/"},{"categories":["网络相关"],"content":"Hugo的本质就是把 .md格式的文章通过一套引擎渲染成 .html页面。 因为这个过程是全自动化的，所以编辑网站文章就是编辑本地的 .md文章。 Visual Studio Code(简称 vscode)，集成了Git以及编辑markdown的插件，同时也有Hugo相关的插件，成为了我认为最适合编辑和管理Hugo网站的编辑器。 ","date":"2022-01-12","objectID":"/posts/fd472e0d/:0:0","tags":["Hugo","vscode","plugin"],"title":"使用Hugo搭建个人网站(六) 编辑文章和管理网站","uri":"/posts/fd472e0d/"},{"categories":["网络相关"],"content":"VSCode ","date":"2022-01-12","objectID":"/posts/fd472e0d/:1:0","tags":["Hugo","vscode","plugin"],"title":"使用Hugo搭建个人网站(六) 编辑文章和管理网站","uri":"/posts/fd472e0d/"},{"categories":["网络相关"],"content":"插件 Markdown All in One 此插件主要提供了新建/提升/降级标题的等级的快捷键. Markdown Shotcuts 此插件主要是提供了粗体、斜体、行内代码、代码块的快捷键。 Markdown Paste 此插件主要是提供了直接向 md文章里贴图的功能. Hugofy(荒野無燈版) 此插件主要是提供了新建文章时直接使用Hugo Page Bundles的方式. 有了以上四个插件,编辑Hugo网站直接起飞。 ","date":"2022-01-12","objectID":"/posts/fd472e0d/:1:1","tags":["Hugo","vscode","plugin"],"title":"使用Hugo搭建个人网站(六) 编辑文章和管理网站","uri":"/posts/fd472e0d/"},{"categories":["网络相关"],"content":"workspace vscode有个功能是 workspace。它的最大的作用是为不同的环境启用或者禁用不同的插件。 在某个目录下添加一个名为 workspace.code-workspace的文件，就可以把整个目录当成一个工作区。 而且这个 workspace.code-workspace文件是自动创建的。 ","date":"2022-01-12","objectID":"/posts/fd472e0d/:1:2","tags":["Hugo","vscode","plugin"],"title":"使用Hugo搭建个人网站(六) 编辑文章和管理网站","uri":"/posts/fd472e0d/"},{"categories":["网络相关"],"content":"Git上传 当有文件变更时： 点击左侧的Git图标 点击+号 在输入框里输入commit的内容 点击同步 ","date":"2022-01-12","objectID":"/posts/fd472e0d/:1:3","tags":["Hugo","vscode","plugin"],"title":"使用Hugo搭建个人网站(六) 编辑文章和管理网站","uri":"/posts/fd472e0d/"},{"categories":["网络相关"],"content":"OneDrive 算是一个技巧吧。 把Hugo的本地网站放在 OneDrive里同步， Github之外，又多了一份备份 省去了在不同电脑间编辑时，git pull等git的同步操作。 通过上面这些设置，可以在 vscode里进行Hugo编辑、管理、上传的全部操作，而且步骤简单。 让我们把精力全部放在网站内容上。 ","date":"2022-01-12","objectID":"/posts/fd472e0d/:2:0","tags":["Hugo","vscode","plugin"],"title":"使用Hugo搭建个人网站(六) 编辑文章和管理网站","uri":"/posts/fd472e0d/"},{"categories":["网络相关"],"content":"什么是Page Bundles呢,官方网站的解释在这里 简单来说,一般的Hugo网站,每篇文章是一个以文章名称命令的.md格式的文档，保存在content/posts目录下，文章中所有的资源-图片、视频、PDF等附件，都保存在根目录的static目录里。 这种做法的缺点是，所有文章的附件都在一个目录里，管理上非常混乱，分不清哪个图片或者附件是属于哪篇文章的。而且在本地预览时，因为图片链接格式的原因，还会遇到无法正常显示图片的问题。 而Page Bundles则解决了这些问题： 新建文章时，会在content/posts目录下创建一个以文章名命令的目录，目录下的index.md才是文章的本体。 文章所有涉及的附件，都保存在index.md的同级目录下。 看下图 如果使用vscode管理编辑Hugo网站，还有插件能很简单的实现Page Bundles的组织形式。下篇再讲。 在这里推荐Page Bundles的网站组织形式，会使网站的文章和附件管理非常的有组织性。 ","date":"2022-01-11","objectID":"/posts/b085eb84/:0:0","tags":["Hugo"],"title":"使用Hugo搭建个人网站(五) 使用Page Bundles组织网站内容","uri":"/posts/b085eb84/"},{"categories":["操作系统"],"content":"根据所使用的磁盘格式不同，分两种设置方法： 非btrfs分区 btrfs分区 ","date":"2022-01-08","objectID":"/posts/9503817d/:0:0","tags":["linux"],"title":"LInux下使用交换分区文件替代交换分区","uri":"/posts/9503817d/"},{"categories":["操作系统"],"content":"非btrfs分区 ","date":"2022-01-08","objectID":"/posts/9503817d/:1:0","tags":["linux"],"title":"LInux下使用交换分区文件替代交换分区","uri":"/posts/9503817d/"},{"categories":["操作系统"],"content":"增加交换分区文件 依次执行下面的命令，来新建启用交换分区 新建交换分区文件，大小为 8G：（bs*count=文件大小） sudo dd if=/dev/zero of=/swapfile bs=1M count=8192 格式化交换分区文件： sudo mkswap /swapfile 修正/swapfile的文件权限 sudo chmod 0600 /swapfile 启用交换分区文件： sudo swapon /swapfile ","date":"2022-01-08","objectID":"/posts/9503817d/:1:1","tags":["linux"],"title":"LInux下使用交换分区文件替代交换分区","uri":"/posts/9503817d/"},{"categories":["操作系统"],"content":"启用交换分区文件 开机自动挂载: 编辑/etc/fstab文件 sudo vi /etc/fstab 添加下面内容: /swapfile swap swap defaults 0 0 验证是否有交换分区 free -m ","date":"2022-01-08","objectID":"/posts/9503817d/:1:2","tags":["linux"],"title":"LInux下使用交换分区文件替代交换分区","uri":"/posts/9503817d/"},{"categories":["操作系统"],"content":"移除交换分区文件 执行下面的命令： sudo swapoff /swapfile \u0026\u0026 sudo rm /swapfile ","date":"2022-01-08","objectID":"/posts/9503817d/:1:3","tags":["linux"],"title":"LInux下使用交换分区文件替代交换分区","uri":"/posts/9503817d/"},{"categories":["操作系统"],"content":"btrfs分区 ","date":"2022-01-08","objectID":"/posts/9503817d/:2:0","tags":["linux"],"title":"LInux下使用交换分区文件替代交换分区","uri":"/posts/9503817d/"},{"categories":["操作系统"],"content":"使用root账户 sudo -i ","date":"2022-01-08","objectID":"/posts/9503817d/:2:1","tags":["linux"],"title":"LInux下使用交换分区文件替代交换分区","uri":"/posts/9503817d/"},{"categories":["操作系统"],"content":"依次执行下面的命令 # truncate -s 0 /swapfile # chattr +C /swapfile # fallocate -l 4G /swapfile # chmod 0600 /swapfile # mkswap /swapfile # swapon /swapfile ","date":"2022-01-08","objectID":"/posts/9503817d/:2:2","tags":["linux"],"title":"LInux下使用交换分区文件替代交换分区","uri":"/posts/9503817d/"},{"categories":["操作系统"],"content":"挂载到fstab /swapfile none swap defaults 0 0 ","date":"2022-01-08","objectID":"/posts/9503817d/:2:3","tags":["linux"],"title":"LInux下使用交换分区文件替代交换分区","uri":"/posts/9503817d/"},{"categories":["操作系统"],"content":"我是习惯用专用的FTP软件来连接FTP,比如FlashFXP等, 但是也有人喜欢用windows资源管理器连接FTP服务器，且不用老输入用户名、密码1。 最简单的实现方法如下： 在桌面右键－新建－快捷方式－在对象位置框中输入 explorer.exe ftp://user:pass@host/ 然后下一步，随便输入一个名称，完成即可。 注：以上user为FTP用户名，pass为FTP密码，host为FTP服务器地址。 这样建立的快捷方式是用资源管理器打开（直接填地址会当成internet快捷方式用浏览器打开），且自动登录，并可修改快捷方式图标。 学自这篇文章 ↩︎ ","date":"2022-01-07","objectID":"/posts/1de5cb42/:0:0","tags":["windows","ftp"],"title":"如何使用windows的资源管理器打开FTP","uri":"/posts/1de5cb42/"},{"categories":["操作系统"],"content":"之所以要改成英文名称,是为了在终端下操作方便。 一、打开终端，在终端中输入命令: export LANG=en_US xdg-user-dirs-gtk-update 跳出对话框询问是否将目录转化为英文路径,同意并关闭。 二、在终端中输入命令: export LANG=zh_CN 重新启动系统，系统会提示更新文件名称，选择不再提示,并取消修改。 ","date":"2022-01-07","objectID":"/posts/bc511af0/:0:0","tags":["linux"],"title":"Linux主目录下的文件名改成英文","uri":"/posts/bc511af0/"},{"categories":["网络相关"],"content":"部署网站到Github上使用的是Github Page功能。 一般来说，部署Hugo网站到Github Page的流程是这样的： 新建一个Github Page的repo 把网站源码部署到repo的一个分支，比如source 把网站的public文件部署到repo的master分支 这种方法能同时备份网站源码和网站，但也有不足之处: 网站源码和生成的网站都处于公共分支,任何人都能查看 每次更新网站,得同时更新网站源码和生成网站,比较繁琐 因此,本文介绍如何使用Github Action,解决上面的两个不足之处。 ","date":"2022-01-06","objectID":"/posts/95a48970/:0:0","tags":["hugo","git"],"title":"使用Hugo搭建个人网站(四)-使用Github Action自动部署到Github Pages","uri":"/posts/95a48970/"},{"categories":["网络相关"],"content":"基本思路 新建一个private repo（私人仓库）,用于保存网站源码 设置Github Action,每当private repo有提交时，就自动监测源码的变化、自动生成网站且自动发布到Github Page上。 这样，每次只需把网站源码提交到private repo就可以了，剩下的所有工作由Github Action来自动完成。 ","date":"2022-01-06","objectID":"/posts/95a48970/:1:0","tags":["hugo","git"],"title":"使用Hugo搭建个人网站(四)-使用Github Action自动部署到Github Pages","uri":"/posts/95a48970/"},{"categories":["网络相关"],"content":"Github Action设置 ","date":"2022-01-06","objectID":"/posts/95a48970/:2:0","tags":["hugo","git"],"title":"使用Hugo搭建个人网站(四)-使用Github Action自动部署到Github Pages","uri":"/posts/95a48970/"},{"categories":["网络相关"],"content":"生成Personal access tokens 由于源码是保存在私人仓库的，这里需要使用Personal access tokens来具备改写别的repo的权限。 点击头像下拉菜单-Settings-Developer Settings-Personal access tokens。 点击右侧的generate new token 名字随便填,比如ACTION_ACCESS_TOKEN 下方repo的所有选项全部选上: 还有admin:repo_hook,全部选上: 生成的token保存好备用 ","date":"2022-01-06","objectID":"/posts/95a48970/:2:1","tags":["hugo","git"],"title":"使用Hugo搭建个人网站(四)-使用Github Action自动部署到Github Pages","uri":"/posts/95a48970/"},{"categories":["网络相关"],"content":"私人仓库设置 新建一个私人仓库,名字随意 在此repo上，Settings-Secrets-New repository secret 把刚才申请的Personal access tokens填写上。 Name必须和刚才申请Personal access tokens时填写的一致，比如ACTION_ACCESS_TOKEN ","date":"2022-01-06","objectID":"/posts/95a48970/:3:0","tags":["hugo","git"],"title":"使用Hugo搭建个人网站(四)-使用Github Action自动部署到Github Pages","uri":"/posts/95a48970/"},{"categories":["网络相关"],"content":"网站设置 在网站根目录里新建两个文件夹.github/workflows。 在workflows里新建一个后缀为.yml的文件，比如hugodeploy.yml(文件名自己随便取)。 hugodeploy.yml的内容如下: name:HugoDeploy on:push:branches:- master # 这里的意思是当 master分支发生push的时候，运行下面的jobsenv:TZ:Asia/Shanghai# 设置当前环境时区jobs:deploy:# 任务名自取runs-on:ubuntu-20.04# 在什么环境运行任务steps:- name:Checkoutuses:actions/checkout@v3# 引用actions/checkout这个action，与所在的github仓库同名with:submodules:true# Fetch Hugo themes (true OR recursive) 获取submodule主题fetch-depth:0# Fetch all history for .GitInfo and .Lastmod- name:Disable quotePathrun:git config --global core.quotePath false- name:Setup Hugo# 步骤名自取uses:peaceiris/actions-hugo@v2# hugo官方提供的action，用于在任务环境中获取hugowith:hugo-version:'0.99.1'# 获取最新版本的hugoextended:true- name:Cache resources# 缓存 resource 文件加快生成速度uses:actions/cache@v3with:path:resources# 检查照片文件变化key:${{ runner.os }}-hugocache-${{ hashFiles('content/**/*') }}restore-keys:${{ runner.os }}-hugocache-- name:Buildrun:hugo --minify# 使用hugo构建静态网页- name:Deployuses:peaceiris/actions-gh-pages@v3# 一个自动发布github pages的actionwith:# github_token: ${{ secrets.GITHUB_TOKEN }} 该项适用于发布到源码相同repo的情况，不能用于发布到其他repoexternal_repository:yourname/yourname.github.io# 发布到哪个repopersonal_token:${{ secrets.ACTION_ACCESS_TOKEN }}# 发布到其他repo需要提供上面生成的personal access tokenpublish_dir:./public# 注意这里指的是要发布哪个文件夹的内容，而不是指发布到目的仓库的什么位置，因为hugo默认生成静态网页到public文件夹，所以这里发布public文件夹里的内容publish_branch:master# 发布到哪个branch 需要改动的是: external_repository: 填写自己的Github Page仓库地址 ","date":"2022-01-06","objectID":"/posts/95a48970/:4:0","tags":["hugo","git"],"title":"使用Hugo搭建个人网站(四)-使用Github Action自动部署到Github Pages","uri":"/posts/95a48970/"},{"categories":["网络相关"],"content":"部署到Github 网站根目录下,执行下面命令，部署到远程私人仓库 git remote add origin https://github.com/your_private_repo git add . git commit -m \"Initial\" git push -u origin master 注意：git commit后面的\"Initial\"就是单次执行Github Action的任务名称。 ","date":"2022-01-06","objectID":"/posts/95a48970/:5:0","tags":["hugo","git"],"title":"使用Hugo搭建个人网站(四)-使用Github Action自动部署到Github Pages","uri":"/posts/95a48970/"},{"categories":["网络相关"],"content":"查看运行情况 到私有仓库，点击Actions，查看Github Action的运行情况。 一切正常的话，在你的Github Page仓库里就能看到生成的网站了。 ","date":"2022-01-06","objectID":"/posts/95a48970/:6:0","tags":["hugo","git"],"title":"使用Hugo搭建个人网站(四)-使用Github Action自动部署到Github Pages","uri":"/posts/95a48970/"},{"categories":["网络相关"],"content":"网站图标favicon,虽然对于网站不是必须的，但是有这个东西能显著增加网站的正规性和美观性。 ","date":"2022-01-05","objectID":"/posts/b8cc834e/:0:0","tags":["hugo","theme"],"title":"使用Hugo搭建个人网站(三)-LoveIt主题启用网站图标","uri":"/posts/b8cc834e/"},{"categories":["网络相关"],"content":"生成favicon 1、打开realfavicongenerator,点击右上角Select your Favicon image链接。 这时会打开对话框，让你选择一张图片，等待完成即可。 2、完成后，会出现下载链接，点击下载即可。 ","date":"2022-01-05","objectID":"/posts/b8cc834e/:1:0","tags":["hugo","theme"],"title":"使用Hugo搭建个人网站(三)-LoveIt主题启用网站图标","uri":"/posts/b8cc834e/"},{"categories":["网络相关"],"content":"启用favicon 把下载的文件，全部解压到网站根目录的static中。 因为LoveIt主题自带了对realfavicongenerator生成的favicon格式支持，所以不用再做其它设置，直接就生效。 ","date":"2022-01-05","objectID":"/posts/b8cc834e/:2:0","tags":["hugo","theme"],"title":"使用Hugo搭建个人网站(三)-LoveIt主题启用网站图标","uri":"/posts/b8cc834e/"},{"categories":["网络相关"],"content":"LoveIt主题自带的搜索插件是lunr和algolia，这两个都不太好用。 在此，我们使用Hugo专用的搜索插件hugo-search-fuse-js来替代LoveIt主题自带的搜索。 ","date":"2022-01-05","objectID":"/posts/98850c88/:0:0","tags":["hugo","theme"],"title":"使用Hugo搭建个人网站(二)-LoveIt主题自定义搜索","uri":"/posts/98850c88/"},{"categories":["网络相关"],"content":"安装hugo-search-fuse-js 1、网站根目录下，使用下面命令来安装： git submodule add https://github.com/kaushalmodi/hugo-search-fuse-js themes/hugo-search-fuse-js 2、把hugo-search-fuse-js添加到站点配置文件config.toml里，如下所示： theme = [\"hugo-search-fuse-js\", \"LoveIt\"] 注意 hugo-search-fuse-js要在最前面，后面跟着的是主题的名字。 3、新建一个content/search.md文件 hugo new search.md 内容如下： +++ title = \"Search\" layout = \"search\" outputs = [\"html\", \"json\"] [sitemap] priority = 0.1 +++ 4、修改页面模板文件baseof.html 把主题目录下的\\themes\\LoveIt\\layouts_default\\baseof.html拷贝到站点根目录下的layouts\\_default\\baseof.html。 在拷贝后的baseof.html里插入两段代码：{{ block \"main\" . }}{{ end }}和{{ block \"footer\" . }}{{ end }} 如下所示： \u003cdiv class=\"wrapper\"\u003e {{- partial \"header.html\" . -}} \u003cmain class=\"main\"\u003e \u003cdiv class=\"container\"\u003e {{ block \"main\" . }}{{ end }} {{- block \"content\" . }}{{ end -}} \u003c/div\u003e \u003c/main\u003e {{- partial \"footer.html\" . -}} {{ block \"footer\" . }}{{ end }} \u003c/div\u003e ","date":"2022-01-05","objectID":"/posts/98850c88/:1:0","tags":["hugo","theme"],"title":"使用Hugo搭建个人网站(二)-LoveIt主题自定义搜索","uri":"/posts/98850c88/"},{"categories":["网络相关"],"content":"添加搜索按钮 在站点配置文件里添加一个新的按钮给搜索功能使用，如下： [[languages.zh-cn.menu.main]] identifier = \"search\" pre = \"\u003ci class='fas fa-fw fa-search'\u003e\u003c/i\u003e\" name = \"搜索\" url = \"/search/\" weight = 6 ","date":"2022-01-05","objectID":"/posts/98850c88/:2:0","tags":["hugo","theme"],"title":"使用Hugo搭建个人网站(二)-LoveIt主题自定义搜索","uri":"/posts/98850c88/"},{"categories":["网络相关"],"content":"关闭LoveIt主题默认的搜索插件 在站点配置文件里把默认的搜索插件关闭，如下： [params] [params.app] [params.search] enable = false ","date":"2022-01-05","objectID":"/posts/98850c88/:3:0","tags":["hugo","theme"],"title":"使用Hugo搭建个人网站(二)-LoveIt主题自定义搜索","uri":"/posts/98850c88/"},{"categories":["网络相关"],"content":"修改搜索页面的样式 如果对该插件生成的搜索页面样式不满意，可以自行修改。 在网站assets\\css\\_custom.scss文件里添加下面内容： /* 搜索页面 */ .search { position: relative; padding-top: 3.5rem; padding-bottom: 1rem; width: 57.5%; margin: 0 auto; background: white; opacity: .95; } [theme=dark] .search { background: #3a3535; } [theme=dark] .search header, .search header { background-color: #f8f8f8; } [theme=dark] .search header:hover, .search header:hover { -webkit-box-shadow: none; box-shadow: none; } .search header h1 { padding-left: 1rem; background: white; } [theme=dark] .search header h1 { background: #3a3535; } [theme=dark] .search input, .search input { height: initial; width: initial; color: initial; background-color: white; margin: 0 0 0 1rem; border-width: 2px; border-style: inset; border-color: initial; border-image: initial; -webkit-border-radius: 0; -moz-border-radius: 0; border-radius: 0; } .search #search-results { padding-left: 1rem; padding-right: 1rem; } [theme=dark] a:active, [theme=dark] a:hover { color: #2d96bd; } .search hr { margin-left: 1rem; margin-right: 1rem; } ","date":"2022-01-05","objectID":"/posts/98850c88/:4:0","tags":["hugo","theme"],"title":"使用Hugo搭建个人网站(二)-LoveIt主题自定义搜索","uri":"/posts/98850c88/"},{"categories":["网络相关"],"content":"优化中文搜索效果 这个搜索功能借助了Fuse.js模糊搜索引擎，针对中文搜索需要做一些优化。 编辑themes\\hugo-search-fuse-js\\static\\js\\search.js，下面的示例已经添加了部分中文注释： // Options for fuse.js let fuseOptions = { shouldSort: true, // 是否按分数对结果列表排序 includeMatches: true, // 是否应将分数包含在结果集中。0分表示完全匹配，1分表示完全不匹配。 tokenize: true, matchAllTokens: true, threshold: 0.2, // 匹配算法阈值。阈值为0.0需要完全匹配（字母和位置），阈值为1.0将匹配任何内容。 location: 0, // 确定文本中预期找到的模式的大致位置。 /** * 确定匹配与模糊位置（由位置指定）的距离。一个精确的字母匹配，即距离模糊位置很远的字符将被视为完全不匹配。 * 距离为0要求匹配位于指定的准确位置，距离为100则要求完全匹配位于使用阈值0.2找到的位置的20个字符以内。 */ distance: 100, maxPatternLength: 64, // 模式的最大长度 minMatchCharLength: 2, // 模式的最小字符长度 keys: [ {name:\"title\",weight:0.8}, {name:\"tags\",weight:0.5}, {name:\"categories\",weight:0.5}, {name:\"contents\",weight:0.4} ] }; 这里和中文搜索有关的主要就3个选项： threshold location distance threshold是阈值，这个参数搭配distance使用。如果阈值填了0.0，相当于distance没有意义。 location填0就行，distance填100就足够了，太大了会导致搜索到过多的结果。 最张参数如下： threshold: 0.2, location: 0, distance: 100 可以根据个人情况来修改这几个参数的值。 ","date":"2022-01-05","objectID":"/posts/98850c88/:5:0","tags":["hugo","theme"],"title":"使用Hugo搭建个人网站(二)-LoveIt主题自定义搜索","uri":"/posts/98850c88/"},{"categories":null,"content":"记录一些和生活、兴趣、研究等相关的东西。 ","date":"2022-01-05","objectID":"/about/:0:0","tags":null,"title":"关于本站","uri":"/about/"},{"categories":null,"content":"2023年1月14日 添加和更新功能 升级github action到v3版本 现在能够正确显示最后更新时间了 在主页和文章的顶部显示文章的最后更新时间 ","date":"2022-01-05","objectID":"/about/:1:0","tags":null,"title":"关于本站","uri":"/about/"},{"categories":null,"content":"2022年12月15日 升级LoveIt主题 看了下LoveIt主题，发现最后一次提交也是5个月前。 说明LoveIt主题已经很稳定，于是把博客的LoveIt主题升级到了最新版。 ","date":"2022-01-05","objectID":"/about/:2:0","tags":null,"title":"关于本站","uri":"/about/"},{"categories":null,"content":"2022年1月7日 建站 网站的各项功能都调整到满意的程度，正式进入实用阶段。 搜索功能没有比较好的，感觉也用不到，暂时不折腾了。 ","date":"2022-01-05","objectID":"/about/:3:0","tags":null,"title":"关于本站","uri":"/about/"},{"categories":["网络相关"],"content":" 本文使用的软件的版本如下： hugo: 0.91.2-extended loveit主题: 0.2.10 特别注意:hugo必须使用extended版本 关于Hugo的安装和网站的生成，本文不再详述,网上教程一大堆。 本文主要介绍在安装过程中遇到一些问题及解决方法。 ","date":"2022-01-04","objectID":"/posts/bf651441/:0:0","tags":["hugo","theme"],"title":"使用Hugo搭建个人网站(一)-基本设置和LoveIt主题","uri":"/posts/bf651441/"},{"categories":["网络相关"],"content":"设置自定义CSS文件 生成网站后,需要在网站根目录下创建一个自定义的文件：assets\\css\\_custom.scss。 以后一些主题没提供的页面，所需要的css都保存在这个文件里，最典型的就是自定义搜索的页面。 ","date":"2022-01-04","objectID":"/posts/bf651441/:1:0","tags":["hugo","theme"],"title":"使用Hugo搭建个人网站(一)-基本设置和LoveIt主题","uri":"/posts/bf651441/"},{"categories":["网络相关"],"content":"安装LoveIt主题 我喜欢用LoveIt主题，安装方式有： 去官网下载zip文件，解压到themes目录下 用git clone的方式 用git submodule的方法 在这里采用git submodule的方法。 进入网站根目录后，运行命令： git init git submodule add https://github.com/dillonzq/LoveIt themes/LoveIt ","date":"2022-01-04","objectID":"/posts/bf651441/:2:0","tags":["hugo","theme"],"title":"使用Hugo搭建个人网站(一)-基本设置和LoveIt主题","uri":"/posts/bf651441/"},{"categories":["网络相关"],"content":"修改config.toml config.toml是整个网站的配置文件，位于网站的根目录下。 生成网站后，自带的config.toml太简单了，基本没啥用,我们需要用LoveIt主题目录下的config.toml来替代。 把网站根目录下的themes\\LoveIt\\exampleSite\\config.toml文件，拷贝到网站的根目录下。 网站首次运行前，需要对config.toml进行一些修改，确保首次运行网站时不会报错。 错误1：关于module 现象: Error: module \"LoveIt\" not found; either add it as a Hugo Module or store it in xxx 原因：config.toml的第10行设置了主题路径。 解决: 把第10行注释掉就可以了。 # 主题目录 #themesDir = \"../..\" 错误2：关于git 现象:在运行hugo server的时候，有和git有关的错误提示 原因：这是因为在config.toml中，启用了 # 是否使用 git 信息 enableGitInfo = true 解决：两种方法： 在网站根目录下运行git init。 把enableGitInfo属性改成false: # 是否使用 git 信息 enableGitInfo = false ","date":"2022-01-04","objectID":"/posts/bf651441/:3:0","tags":["hugo","theme"],"title":"使用Hugo搭建个人网站(一)-基本设置和LoveIt主题","uri":"/posts/bf651441/"},{"categories":["网络相关"],"content":"新建页面 有一些页面需要自己创建,比如说网站常见的关于(about)页面。 方法很简单，运行 hugo new about.md 生成的文件存放于conten/posts下。 ","date":"2022-01-04","objectID":"/posts/bf651441/:4:0","tags":["hugo","theme"],"title":"使用Hugo搭建个人网站(一)-基本设置和LoveIt主题","uri":"/posts/bf651441/"},{"categories":["网络相关"],"content":"新建文章 使用下面命令: hugo new posts/my-first-post.md 这样就创建了一篇名字为my-first-post的文章，存放在网站根目录的content\\posts下。 这种新建文章的方式不推荐，有更好的方式，看这里。 ","date":"2022-01-04","objectID":"/posts/bf651441/:5:0","tags":["hugo","theme"],"title":"使用Hugo搭建个人网站(一)-基本设置和LoveIt主题","uri":"/posts/bf651441/"},{"categories":["网络相关"],"content":"本地预览 运行命令： hugo server 在浏览器输入http://localhost:1313来预览。 hugo serve的默认运行环境是 development, 由于本地 development 环境的限制, 评论系统, CDN 和 fingerprint 不会在 development 环境下启用。 如果想开启这些特性，使用下面的命令来开启： hugo serve -e production 至此，一个基本的Hugo网站就搭建起来了。 ","date":"2022-01-04","objectID":"/posts/bf651441/:6:0","tags":["hugo","theme"],"title":"使用Hugo搭建个人网站(一)-基本设置和LoveIt主题","uri":"/posts/bf651441/"}]