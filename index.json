[{"categories":[],"content":"最近发现,文章最后的更新于时间和文章创建的时间是一致的,这就毫无意义了,于是开始着手解决。 没想到的是，这是个大工程。 中间涉及的环节太多，有点复杂。目前的成果是使用文档修改的时间做为更新时间。 经过测试，文档修改时间还是不行，目前尚不清楚是为什么 ","date":"2022-05-29","objectID":"/posts/bfaf5ee9/:0:0","tags":[],"title":"Hugo使用正确的自动更新时间","uri":"/posts/bfaf5ee9/"},{"categories":["网络相关"],"content":"hugo博客部署在github page上。 最近几天发现，博客的文章和disqus评论都是正常的，唯独涉及图片的部分，一直显示Loading加载不出来。 一番查找后，发现锅在LoveIt主题上，确切的说，是在LoveIt主题使用的cdn–https://cdn.jsdelivr.net上。 ","date":"2022-05-28","objectID":"/posts/da4fb9f9/:0:0","tags":["hugo","theme","cdn"],"title":"解决Hugo网站使用LoveIt主题后图片刷新不出来的问题","uri":"/posts/da4fb9f9/"},{"categories":["网络相关"],"content":"问题的根源 LoveIt主题使用的图片加载技术叫lazysizes ，它的官方解释说明是这样的： 基于lazysizes自动转换图片为懒加载 我的理解是，lazysizes可以自动把图片压缩成设置好的大小，并且按需加载。这样就能够加快网页的打开速度了。 lazysizes依赖的核心js是 lazysizes.min.js。 而 lazysizes.min.js存放于https://cdn.jsdelivr.net上。如果https://cdn.jsdelivr.net出现访问问题，图片自然也就加载不出来。 公共CDN属于基础网络设施，全球有大量的项目依赖于它，一般不会出现问题。 很不幸的是，这次恰恰就是https://cdn.jsdelivr.net出现了问题，而且好像只有在中国大陆出现了问题。 更进一步，是只有移动、电信的网络出现了问题，联通访问还是正常的（我为什么会知道？因为我有电信、联通、移动三网的环境😛）。 这就是此次Hugo网站加载不出来图片的根本原因。 ","date":"2022-05-28","objectID":"/posts/da4fb9f9/:1:0","tags":["hugo","theme","cdn"],"title":"解决Hugo网站使用LoveIt主题后图片刷新不出来的问题","uri":"/posts/da4fb9f9/"},{"categories":["网络相关"],"content":"解决方法 知道问题根源了,解决方法也很简单–换一个cdn就可以了。 最简单的方法是： 还是使用jsdelivr.net的cdn，但是换一个域名，目前gcore.jsdelivr.net这个域名是可以使用的。 具体步骤： 编辑文件 themes\\LoveIt\\assets\\data\\cdn\\jsdelivr.yml 修改第二行,原来是: libFiles: https://cdn.jsdelivr.net/npm/ 修改为: libFiles: https://gcore.jsdelivr.net/npm/ 问题解决。 ","date":"2022-05-28","objectID":"/posts/da4fb9f9/:2:0","tags":["hugo","theme","cdn"],"title":"解决Hugo网站使用LoveIt主题后图片刷新不出来的问题","uri":"/posts/da4fb9f9/"},{"categories":["软件应用"],"content":" 笔记软件有很多,优秀的也不少。想找一个符合自己要求的跨平台笔记方案，难点在于跨平台这三个字，更确切的说是能够兼顾Linux平台。 历经一番波折，期间换来换去，最终找到了坚果云+Joplin这个终极跨平台笔记解决方案。 ","date":"2022-05-28","objectID":"/posts/3e939557/:0:0","tags":["坚果云","Joplin","linux"],"title":"我的跨平台笔记方案-坚果云+Joplin","uri":"/posts/3e939557/"},{"categories":["软件应用"],"content":"坚果云 坚果云可以说是所有网盘中对Linux的支持最优秀的了。 坚果云的Linux客户端拥有和windows、Mac下客户端完全一致的功能。 和Drobox相比，坚果云没有用户数的限制，只有流量限制。这个限制就很聪明，用来同步一些小文件完全够用，将来需要大空间了再花钱，也不贵。 ","date":"2022-05-28","objectID":"/posts/3e939557/:1:0","tags":["坚果云","Joplin","linux"],"title":"我的跨平台笔记方案-坚果云+Joplin","uri":"/posts/3e939557/"},{"categories":["软件应用"],"content":"Joplin Joplin是开源笔记软件的后起之秀，最大的优势是笔记可完全个人拥有。 和一些商业公司锁格式、锁导出等恶心行为相比，Joplin完全是笔记软件的清流，这也是为什么我喜欢开源软件。 Joplin的功能非常完备，支持图片、视频、表格、Markdown、代码、网页捕捉等，满足记笔记的一且需求。 ","date":"2022-05-28","objectID":"/posts/3e939557/:2:0","tags":["坚果云","Joplin","linux"],"title":"我的跨平台笔记方案-坚果云+Joplin","uri":"/posts/3e939557/"},{"categories":["软件应用"],"content":"整合方案 简单来说，就是坚果云开启WebDAV，然后把Joplin的笔记同步到坚果云的WebDAV里。 因为坚果云和Joplin都是全平台的，所有也就达成了跨平台体验一致的记笔记解决方案。 ","date":"2022-05-28","objectID":"/posts/3e939557/:3:0","tags":["坚果云","Joplin","linux"],"title":"我的跨平台笔记方案-坚果云+Joplin","uri":"/posts/3e939557/"},{"categories":["软件应用"],"content":"问题和解决 ","date":"2022-05-28","objectID":"/posts/3e939557/:4:0","tags":["坚果云","Joplin","linux"],"title":"我的跨平台笔记方案-坚果云+Joplin","uri":"/posts/3e939557/"},{"categories":["软件应用"],"content":"KDE下坚果云登录界面太小的问题 主要体现在登录界面太小，以至于无法显示登录框的问题。 解决方法： 1、右键点击登录界面的标题栏–更多操作–配置特殊窗口设置 2、点击左下角添加属性 3、在弹出的添加属性到规则中，选择最小尺寸 4、选择强制，然后设置想要的大小，建设设置500以上，我这里是1008x1061 ","date":"2022-05-28","objectID":"/posts/3e939557/:4:1","tags":["坚果云","Joplin","linux"],"title":"我的跨平台笔记方案-坚果云+Joplin","uri":"/posts/3e939557/"},{"categories":["软件应用"],"content":"Joplin同步到坚果云的正确方法 默认的话，Joplin通过WebDAV同步到坚果云会报错，大体意思是太多的连接这个错误。 解决方法： 首先在坚果云里新建一个个人同步文件夹，命名为“Joplin\"，然后在软件设置的webdav地址里填入： https://dav.jianguoyun.com/dav/Joplin 其他照旧就可以了。 ","date":"2022-05-28","objectID":"/posts/3e939557/:4:2","tags":["坚果云","Joplin","linux"],"title":"我的跨平台笔记方案-坚果云+Joplin","uri":"/posts/3e939557/"},{"categories":["硬件设备"],"content":"键盘型号是IKBC W210无线机械键盘。 ","date":"2022-03-09","objectID":"/posts/c0dac05c/:0:0","tags":["键盘"],"title":"解决键盘上的Windows快捷键失灵的问题","uri":"/posts/c0dac05c/"},{"categories":["硬件设备"],"content":"问题 最近两天,忽然发现键盘上的Windows快捷键不起作用了。 Windows 10最让我满意的地方就是它的快捷键了，而这些快捷键大部分是以Win开头的。 没有了快捷键，Windows 10仿佛失去了灵魂。 ","date":"2022-03-09","objectID":"/posts/c0dac05c/:1:0","tags":["键盘"],"title":"解决键盘上的Windows快捷键失灵的问题","uri":"/posts/c0dac05c/"},{"categories":["硬件设备"],"content":"解决过程 一开始以为是Windows 10的三月更新引起的。网上搜索了一下，没有发现反映相关问题的。 于是以“Windows键盘不起作用”为关键字搜索，最终在短乎上一篇反映阿米洛机械键盘的帖子上找到了答案： ","date":"2022-03-09","objectID":"/posts/c0dac05c/:2:0","tags":["键盘"],"title":"解决键盘上的Windows快捷键失灵的问题","uri":"/posts/c0dac05c/"},{"categories":["硬件设备"],"content":"解决方法 其实是我不小心把Windows快捷键给禁用了，附上解决方法 锁定方法 ：fn + 左win 解锁方法： fn + 右win 尽管是针对阿米洛机械键盘的，但是对IKBC W210同样起作用。 ","date":"2022-03-09","objectID":"/posts/c0dac05c/:3:0","tags":["键盘"],"title":"解决键盘上的Windows快捷键失灵的问题","uri":"/posts/c0dac05c/"},{"categories":["网络相关"],"content":"Hugo的本质就是把.md格式的文章通过一套引擎渲染成.html页面。 因为这个过程是全自动化的，所以编辑网站文章就是编辑本地的.md文章。 Visual Studio Code(简称vscode)，集成了Git以及编辑markdown的插件，同时也有Hugo相关的插件，成为了我认为最适合编辑和管理Hugo网站的编辑器。 ","date":"2022-01-12","objectID":"/posts/fd472e0d/:0:0","tags":["Hugo","vscode","Plugin"],"title":"使用Hugo搭建个人网站(六) 编辑文章和管理网站","uri":"/posts/fd472e0d/"},{"categories":["网络相关"],"content":"VSCode ","date":"2022-01-12","objectID":"/posts/fd472e0d/:1:0","tags":["Hugo","vscode","Plugin"],"title":"使用Hugo搭建个人网站(六) 编辑文章和管理网站","uri":"/posts/fd472e0d/"},{"categories":["网络相关"],"content":"插件 Markdown All in One 此插件主要提供了新建/提升/降级标题的等级的快捷键. Markdown Shotcuts 此插件主要是提供了粗体、斜体、行内代码、代码块的快捷键。 Markdown Paste 此插件主要是提供了直接向md文章里贴图的功能. Hugofy(荒野無燈版) 此插件主要是提供了新建文章时直接使用Hugo Page Bundles的方式. 有了以上四个插件,编辑Hugo网站直接起飞。 ","date":"2022-01-12","objectID":"/posts/fd472e0d/:1:1","tags":["Hugo","vscode","Plugin"],"title":"使用Hugo搭建个人网站(六) 编辑文章和管理网站","uri":"/posts/fd472e0d/"},{"categories":["网络相关"],"content":"workspace vscode有个功能是workspace。它的最大的作用是为不同的环境启用或者禁用不同的插件。 在某个目录下添加一个名为workspace.code-workspace的文件，就可以把整个目录当成一个工作区。 而且这个workspace.code-workspace文件是自动创建的。 ","date":"2022-01-12","objectID":"/posts/fd472e0d/:1:2","tags":["Hugo","vscode","Plugin"],"title":"使用Hugo搭建个人网站(六) 编辑文章和管理网站","uri":"/posts/fd472e0d/"},{"categories":["网络相关"],"content":"Git上传 当有文件变更时： 点击左侧的Git图标 点击+号 在输入框里输入commit的内容 点击同步 ","date":"2022-01-12","objectID":"/posts/fd472e0d/:1:3","tags":["Hugo","vscode","Plugin"],"title":"使用Hugo搭建个人网站(六) 编辑文章和管理网站","uri":"/posts/fd472e0d/"},{"categories":["网络相关"],"content":"OneDrive 算是一个技巧吧。 把Hugo的本地网站放在OneDrive里同步， Github之外，又多了一份备份 省去了在不同电脑间编辑时，git pull等git的同步操作。 通过上面这些设置，可以在vscode里进行Hugo编辑、管理、上传的全部操作，而且步骤简单。 让我们把精力全部放在网站内容上。 ","date":"2022-01-12","objectID":"/posts/fd472e0d/:2:0","tags":["Hugo","vscode","Plugin"],"title":"使用Hugo搭建个人网站(六) 编辑文章和管理网站","uri":"/posts/fd472e0d/"},{"categories":["网络相关"],"content":"什么是Page Bundles呢,官方网站的解释在这里 简单来说,一般的Hugo网站,每篇文章是一个以文章名称命令的.md格式的文档，保存在content/posts目录下，文章中所有的资源-图片、视频、PDF等附件，都保存在根目录的static目录里。 这种做法的缺点是，所有文章的附件都在一个目录里，管理上非常混乱，分不清哪个图片或者附件是属于哪篇文章的。而且在本地预览时，因为图片链接格式的原因，还会遇到无法正常显示图片的问题。 而Page Bundles则解决了这些问题： 新建文章时，会在content/posts目录下创建一个以文章名命令的目录，目录下的index.md才是文章的本体。 文章所有涉及的附件，都保存在index.md的同级目录下。 看下图 如果使用vscode管理编辑Hugo网站，还有插件能很简单的实现Page Bundles的组织形式。下篇再讲。 在这里推荐Page Bundles的网站组织形式，会使网站的文章和附件管理非常的有组织性。 ","date":"2022-01-11","objectID":"/posts/b085eb84/:0:0","tags":["Hugo"],"title":"使用Hugo搭建个人网站(五) 使用Page Bundles组织网站内容","uri":"/posts/b085eb84/"},{"categories":["操作系统"],"content":"增加交换分区文件 依次执行下面的命令，来新建启用交换分区 新建交换分区文件，大小为 8G：（bs*count=文件大小） sudo dd if=/dev/zero of=/swapfile bs=1M count=8192 格式化交换分区文件： sudo mkswap /swapfile 修正/swapfile的文件权限 chmod 0600 /swapfile 启用交换分区文件： sudo swapon /swapfile ","date":"2022-01-08","objectID":"/posts/9503817d/:1:0","tags":["linux"],"title":"LInux下使用交换分区文件替代交换分区","uri":"/posts/9503817d/"},{"categories":["操作系统"],"content":"启用交换分区文件 开机自动挂载: 编辑/etc/fstab文件 sudo vi /etc/fstab 添加下面内容: /swapfile swap swap defaults 0 0 验证是否有交换分区 free -m ","date":"2022-01-08","objectID":"/posts/9503817d/:2:0","tags":["linux"],"title":"LInux下使用交换分区文件替代交换分区","uri":"/posts/9503817d/"},{"categories":["操作系统"],"content":"移除交换分区文件 执行下面的命令： sudo swapoff /swapfile \u0026\u0026 sudo rm /swapfile ","date":"2022-01-08","objectID":"/posts/9503817d/:3:0","tags":["linux"],"title":"LInux下使用交换分区文件替代交换分区","uri":"/posts/9503817d/"},{"categories":["操作系统"],"content":"我是习惯用专用的FTP软件来连接FTP,比如FlashFXP等, 但是也有人喜欢用windows资源管理器连接FTP服务器，且不用老输入用户名、密码1。 最简单的实现方法如下： 在桌面右键－新建－快捷方式－在对象位置框中输入 explorer.exe ftp://user:pass@host/ 然后下一步，随便输入一个名称，完成即可。 注：以上user为FTP用户名，pass为FTP密码，host为FTP服务器地址。 这样建立的快捷方式是用资源管理器打开（直接填地址会当成internet快捷方式用浏览器打开），且自动登录，并可修改快捷方式图标。 学自这篇文章 ↩︎ ","date":"2022-01-07","objectID":"/posts/1de5cb42/:0:0","tags":["windows","ftp"],"title":"如何使用windows的资源管理器打开FTP","uri":"/posts/1de5cb42/"},{"categories":["操作系统"],"content":"之所以要改成英文名称,是为了在终端下操作方便。 一、打开终端，在终端中输入命令: export LANG=en_US xdg-user-dirs-gtk-update 跳出对话框询问是否将目录转化为英文路径,同意并关闭。 二、在终端中输入命令: export LANG=zh_CN 重新启动系统，系统会提示更新文件名称，选择不再提示,并取消修改。 ","date":"2022-01-07","objectID":"/posts/bc511af0/:0:0","tags":["linux"],"title":"Linux主目录下的文件名改成英文","uri":"/posts/bc511af0/"},{"categories":["网络相关"],"content":"部署网站到Github上使用的是Github Page功能。 一般来说，部署Hugo网站到Github Page的流程是这样的： 新建一个Github Page的repo 把网站源码部署到repo的一个分支，比如source 把网站的public文件部署到repo的master分支 这种方法能同时备份网站源码和网站，但也有不足之处: 网站源码和生成的网站都处于公共分支,任何人都能查看 每次更新网站,得同时更新网站源码和生成网站,比较繁琐 因此,本文介绍如何使用Github Action,解决上面的两个不足之处。 ","date":"2022-01-06","objectID":"/posts/95a48970/:0:0","tags":["hugo","git"],"title":"使用Hugo搭建个人网站(四)-使用Github Action自动部署到Github Pages","uri":"/posts/95a48970/"},{"categories":["网络相关"],"content":"基本思路 新建一个private repo（私人仓库）,用于保存网站源码 设置Github Action,每当private repo有提交时，就自动监测源码的变化、自动生成网站且自动发布到Github Page上。 这样，每次只需把网站源码提交到private repo就可以了，剩下的所有工作由Github Action来自动完成。 ","date":"2022-01-06","objectID":"/posts/95a48970/:1:0","tags":["hugo","git"],"title":"使用Hugo搭建个人网站(四)-使用Github Action自动部署到Github Pages","uri":"/posts/95a48970/"},{"categories":["网络相关"],"content":"Github Action设置 ","date":"2022-01-06","objectID":"/posts/95a48970/:2:0","tags":["hugo","git"],"title":"使用Hugo搭建个人网站(四)-使用Github Action自动部署到Github Pages","uri":"/posts/95a48970/"},{"categories":["网络相关"],"content":"生成Personal access tokens 由于源码是保存在私人仓库的，这里需要使用Personal access tokens来具备改写别的repo的权限。 点击头像下拉菜单-Settings-Developer Settings-Personal access tokens。 点击右侧的generate new token 名字随便填,比如ACTION_ACCESS_TOKEN 下方repo的所有选项全部选上: 还有admin:repo_hook,全部选上: 生成的token保存好备用 ","date":"2022-01-06","objectID":"/posts/95a48970/:2:1","tags":["hugo","git"],"title":"使用Hugo搭建个人网站(四)-使用Github Action自动部署到Github Pages","uri":"/posts/95a48970/"},{"categories":["网络相关"],"content":"私人仓库设置 新建一个私人仓库,名字随意 在此repo上，Settings-Secrets-New repository secret 把刚才申请的Personal access tokens填写上。 Name必须和刚才申请Personal access tokens时填写的一致，比如ACTION_ACCESS_TOKEN ","date":"2022-01-06","objectID":"/posts/95a48970/:3:0","tags":["hugo","git"],"title":"使用Hugo搭建个人网站(四)-使用Github Action自动部署到Github Pages","uri":"/posts/95a48970/"},{"categories":["网络相关"],"content":"网站设置 在网站根目录里新建两个文件夹.github/workflows。 在workflows里新建一个后缀为.yml的文件，比如hugodeploy.yml(文件名自己随便取)。 hugodeploy.yml的内容如下: name:HugoDeploy on:push:branches:- master # 这里的意思是当 master分支发生push的时候，运行下面的jobs，这里先改为github-actionsjobs:deploy:# 任务名自取runs-on:ubuntu-20.04 # 在什么环境运行任务steps:- uses:actions/checkout@v2 # 引用actions/checkout这个action，与所在的github仓库同名with:submodules:true# Fetch Hugo themes (true OR recursive) 获取submodule主题fetch-depth:0# Fetch all history for .GitInfo and .Lastmod- name:Setup Hugo # 步骤名自取uses:peaceiris/actions-hugo@v2 # hugo官方提供的action，用于在任务环境中获取hugowith:hugo-version:'0.91.2'# 获取最新版本的hugoextended:true- name:Buildrun:hugo --minify # 使用hugo构建静态网页- name:Deployuses:peaceiris/actions-gh-pages@v3 # 一个自动发布github pages的actionwith:# github_token: ${{ secrets.GITHUB_TOKEN }} 该项适用于发布到源码相同repo的情况，不能用于发布到其他repoexternal_repository:yourname/yourname.github.io # 发布到哪个repopersonal_token:${{ secrets.ACTION_ACCESS_TOKEN }} # 发布到其他repo需要提供上面生成的personal access tokenpublish_dir:./public # 注意这里指的是要发布哪个文件夹的内容，而不是指发布到目的仓库的什么位置，因为hugo默认生成静态网页到public文件夹，所以这里发布public文件夹里的内容publish_branch:master # 发布到哪个branch 需要改动的就是30和31两行: external_repository: 填写自己的Github Page仓库地址 secrets.ACTION_ACCESS_TOKEN里的ACTION_ACCESS_TOKEN,改成你申请时token时填写的名字。 ","date":"2022-01-06","objectID":"/posts/95a48970/:4:0","tags":["hugo","git"],"title":"使用Hugo搭建个人网站(四)-使用Github Action自动部署到Github Pages","uri":"/posts/95a48970/"},{"categories":["网络相关"],"content":"部署到Github 网站根目录下,执行下面命令，部署到远程私人仓库 git remote add origin https://github.com/your_private_repo git add . git commit -m \"Initial\" git push -u origin master 注意：git commit后面的\"Initial\"就是单次执行Github Action的任务名称。 ","date":"2022-01-06","objectID":"/posts/95a48970/:5:0","tags":["hugo","git"],"title":"使用Hugo搭建个人网站(四)-使用Github Action自动部署到Github Pages","uri":"/posts/95a48970/"},{"categories":["网络相关"],"content":"查看运行情况 到私有仓库，点击Actions，查看Github Action的运行情况。 一切正常的话，在你的Github Page仓库里就能看到生成的网站了。 ","date":"2022-01-06","objectID":"/posts/95a48970/:6:0","tags":["hugo","git"],"title":"使用Hugo搭建个人网站(四)-使用Github Action自动部署到Github Pages","uri":"/posts/95a48970/"},{"categories":["网络相关"],"content":"网站图标favicon,虽然对于网站不是必须的，但是有这个东西能显著增加网站的正规性和美观性。 ","date":"2022-01-05","objectID":"/posts/b8cc834e/:0:0","tags":["hugo","theme"],"title":"使用Hugo搭建个人网站(三)-LoveIt主题启用网站图标","uri":"/posts/b8cc834e/"},{"categories":["网络相关"],"content":"生成favicon 1、打开realfavicongenerator,点击右上角Select your Favicon image链接。 这时会打开对话框，让你选择一张图片，等待完成即可。 2、完成后，会出现下载链接，点击下载即可。 ","date":"2022-01-05","objectID":"/posts/b8cc834e/:1:0","tags":["hugo","theme"],"title":"使用Hugo搭建个人网站(三)-LoveIt主题启用网站图标","uri":"/posts/b8cc834e/"},{"categories":["网络相关"],"content":"启用favicon 把下载的文件，全部解压到网站根目录的static中。 因为LoveIt主题自带了对realfavicongenerator生成的favicon格式支持，所以不用再做其它设置，直接就生效。 ","date":"2022-01-05","objectID":"/posts/b8cc834e/:2:0","tags":["hugo","theme"],"title":"使用Hugo搭建个人网站(三)-LoveIt主题启用网站图标","uri":"/posts/b8cc834e/"},{"categories":["网络相关"],"content":"LoveIt主题自带的搜索插件是lunr和algolia，这两个都不太好用。 在此，我们使用Hugo专用的搜索插件hugo-search-fuse-js来替代LoveIt主题自带的搜索。 ","date":"2022-01-05","objectID":"/posts/98850c88/:0:0","tags":["hugo","theme"],"title":"使用Hugo搭建个人网站(二)-LoveIt主题自定义搜索","uri":"/posts/98850c88/"},{"categories":["网络相关"],"content":"安装hugo-search-fuse-js 1、网站根目录下，使用下面命令来安装： git submodule add https://github.com/kaushalmodi/hugo-search-fuse-js themes/hugo-search-fuse-js 2、把hugo-search-fuse-js添加到站点配置文件config.toml里，如下所示： theme = [\"hugo-search-fuse-js\", \"LoveIt\"] 注意 hugo-search-fuse-js要在最前面，后面跟着的是主题的名字。 3、新建一个content/search.md文件 hugo new search.md 内容如下： +++ title = \"Search\" layout = \"search\" outputs = [\"html\", \"json\"] [sitemap] priority = 0.1 +++ 4、修改页面模板文件baseof.html 把主题目录下的\\themes\\LoveIt\\layouts_default\\baseof.html拷贝到站点根目录下的layouts\\_default\\baseof.html。 在拷贝后的baseof.html里插入两段代码：{{ block \"main\" . }}{{ end }}和{{ block \"footer\" . }}{{ end }} 如下所示： \u003cdiv class=\"wrapper\"\u003e {{- partial \"header.html\" . -}} \u003cmain class=\"main\"\u003e \u003cdiv class=\"container\"\u003e {{ block \"main\" . }}{{ end }} {{- block \"content\" . }}{{ end -}} \u003c/div\u003e \u003c/main\u003e {{- partial \"footer.html\" . -}} {{ block \"footer\" . }}{{ end }} \u003c/div\u003e ","date":"2022-01-05","objectID":"/posts/98850c88/:1:0","tags":["hugo","theme"],"title":"使用Hugo搭建个人网站(二)-LoveIt主题自定义搜索","uri":"/posts/98850c88/"},{"categories":["网络相关"],"content":"添加搜索按钮 在站点配置文件里添加一个新的按钮给搜索功能使用，如下： [[languages.zh-cn.menu.main]] identifier = \"search\" pre = \"\u003ci class='fas fa-fw fa-search'\u003e\u003c/i\u003e\" name = \"搜索\" url = \"/search/\" weight = 6 ","date":"2022-01-05","objectID":"/posts/98850c88/:2:0","tags":["hugo","theme"],"title":"使用Hugo搭建个人网站(二)-LoveIt主题自定义搜索","uri":"/posts/98850c88/"},{"categories":["网络相关"],"content":"关闭LoveIt主题默认的搜索插件 在站点配置文件里把默认的搜索插件关闭，如下： [params] [params.app] [params.search] enable = false ","date":"2022-01-05","objectID":"/posts/98850c88/:3:0","tags":["hugo","theme"],"title":"使用Hugo搭建个人网站(二)-LoveIt主题自定义搜索","uri":"/posts/98850c88/"},{"categories":["网络相关"],"content":"修改搜索页面的样式 如果对该插件生成的搜索页面样式不满意，可以自行修改。 在网站assets\\css\\_custom.scss文件里添加下面内容： /* 搜索页面 */ .search { position: relative; padding-top: 3.5rem; padding-bottom: 1rem; width: 57.5%; margin: 0 auto; background: white; opacity: .95; } [theme=dark] .search { background: #3a3535; } [theme=dark] .search header, .search header { background-color: #f8f8f8; } [theme=dark] .search header:hover, .search header:hover { -webkit-box-shadow: none; box-shadow: none; } .search header h1 { padding-left: 1rem; background: white; } [theme=dark] .search header h1 { background: #3a3535; } [theme=dark] .search input, .search input { height: initial; width: initial; color: initial; background-color: white; margin: 0 0 0 1rem; border-width: 2px; border-style: inset; border-color: initial; border-image: initial; -webkit-border-radius: 0; -moz-border-radius: 0; border-radius: 0; } .search #search-results { padding-left: 1rem; padding-right: 1rem; } [theme=dark] a:active, [theme=dark] a:hover { color: #2d96bd; } .search hr { margin-left: 1rem; margin-right: 1rem; } ","date":"2022-01-05","objectID":"/posts/98850c88/:4:0","tags":["hugo","theme"],"title":"使用Hugo搭建个人网站(二)-LoveIt主题自定义搜索","uri":"/posts/98850c88/"},{"categories":["网络相关"],"content":"优化中文搜索效果 这个搜索功能借助了Fuse.js模糊搜索引擎，针对中文搜索需要做一些优化。 编辑themes\\hugo-search-fuse-js\\static\\js\\search.js，下面的示例已经添加了部分中文注释： // Options for fuse.js let fuseOptions = { shouldSort: true, // 是否按分数对结果列表排序 includeMatches: true, // 是否应将分数包含在结果集中。0分表示完全匹配，1分表示完全不匹配。 tokenize: true, matchAllTokens: true, threshold: 0.2, // 匹配算法阈值。阈值为0.0需要完全匹配（字母和位置），阈值为1.0将匹配任何内容。 location: 0, // 确定文本中预期找到的模式的大致位置。 /** * 确定匹配与模糊位置（由位置指定）的距离。一个精确的字母匹配，即距离模糊位置很远的字符将被视为完全不匹配。 * 距离为0要求匹配位于指定的准确位置，距离为100则要求完全匹配位于使用阈值0.2找到的位置的20个字符以内。 */ distance: 100, maxPatternLength: 64, // 模式的最大长度 minMatchCharLength: 2, // 模式的最小字符长度 keys: [ {name:\"title\",weight:0.8}, {name:\"tags\",weight:0.5}, {name:\"categories\",weight:0.5}, {name:\"contents\",weight:0.4} ] }; 这里和中文搜索有关的主要就3个选项： threshold location distance threshold是阈值，这个参数搭配distance使用。如果阈值填了0.0，相当于distance没有意义。 location填0就行，distance填100就足够了，太大了会导致搜索到过多的结果。 最张参数如下： threshold: 0.2, location: 0, distance: 100 可以根据个人情况来修改这几个参数的值。 ","date":"2022-01-05","objectID":"/posts/98850c88/:5:0","tags":["hugo","theme"],"title":"使用Hugo搭建个人网站(二)-LoveIt主题自定义搜索","uri":"/posts/98850c88/"},{"categories":null,"content":"记录一些和生活、兴趣、研究等相关的东西。 ","date":"2022-01-05","objectID":"/about/:0:0","tags":null,"title":"关于本站","uri":"/about/"},{"categories":null,"content":"2022年1月7日 网站的各项功能都调整到满意的程度，正式进入实用阶段。 搜索功能没有比较好的，感觉也用不到，暂时不折腾了。 ","date":"2022-01-05","objectID":"/about/:1:0","tags":null,"title":"关于本站","uri":"/about/"},{"categories":["网络相关"],"content":" 本文使用的软件的版本如下： hugo: 0.91.2-extended loveit主题: 0.2.10 特别注意:hugo必须使用extended版本 关于Hugo的安装和网站的生成，本文不再详述,网上教程一大堆。 本文主要介绍在安装过程中遇到一些问题及解决方法。 ","date":"2022-01-04","objectID":"/posts/bf651441/:0:0","tags":["hugo","theme"],"title":"使用Hugo搭建个人网站(一)-基本设置和LoveIt主题","uri":"/posts/bf651441/"},{"categories":["网络相关"],"content":"设置自定义CSS文件 生成网站后,需要在网站根目录下创建一个自定义的文件：assets\\css\\_custom.scss。 以后一些主题没提供的页面，所需要的css都保存在这个文件里，最典型的就是自定义搜索的页面。 ","date":"2022-01-04","objectID":"/posts/bf651441/:1:0","tags":["hugo","theme"],"title":"使用Hugo搭建个人网站(一)-基本设置和LoveIt主题","uri":"/posts/bf651441/"},{"categories":["网络相关"],"content":"安装LoveIt主题 我喜欢用LoveIt主题，安装方式有： 去官网下载zip文件，解压到themes目录下 用git clone的方式 用git submodule的方法 在这里采用git submodule的方法。 进入网站根目录后，运行命令： git init git submodule add https://github.com/dillonzq/LoveIt themes/LoveIt ","date":"2022-01-04","objectID":"/posts/bf651441/:2:0","tags":["hugo","theme"],"title":"使用Hugo搭建个人网站(一)-基本设置和LoveIt主题","uri":"/posts/bf651441/"},{"categories":["网络相关"],"content":"修改config.toml config.toml是整个网站的配置文件，位于网站的根目录下。 生成网站后，自带的config.toml太简单了，基本没啥用,我们需要用LoveIt主题目录下的config.toml来替代。 把网站根目录下的themes\\LoveIt\\exampleSite\\config.toml文件，拷贝到网站的根目录下。 网站首次运行前，需要对config.toml进行一些修改，确保首次运行网站时不会报错。 错误1：关于module 现象: Error: module \"LoveIt\" not found; either add it as a Hugo Module or store it in xxx 原因：config.toml的第10行设置了主题路径。 解决: 把第10行注释掉就可以了。 # 主题目录 #themesDir = \"../..\" 错误2：关于git 现象:在运行hugo server的时候，有和git有关的错误提示 原因：这是因为在config.toml中，启用了 # 是否使用 git 信息 enableGitInfo = true 解决：两种方法： 在网站根目录下运行git init。 把enableGitInfo属性改成false: # 是否使用 git 信息 enableGitInfo = false ","date":"2022-01-04","objectID":"/posts/bf651441/:3:0","tags":["hugo","theme"],"title":"使用Hugo搭建个人网站(一)-基本设置和LoveIt主题","uri":"/posts/bf651441/"},{"categories":["网络相关"],"content":"新建页面 有一些页面需要自己创建,比如说网站常见的关于(about)页面。 方法很简单，运行 hugo new about.md 生成的文件存放于conten/posts下。 ","date":"2022-01-04","objectID":"/posts/bf651441/:4:0","tags":["hugo","theme"],"title":"使用Hugo搭建个人网站(一)-基本设置和LoveIt主题","uri":"/posts/bf651441/"},{"categories":["网络相关"],"content":"新建文章 使用下面命令: hugo new posts/my-first-post.md 这样就创建了一篇名字为my-first-post的文章，存放在网站根目录的content\\posts下。 这种新建文章的方式不推荐，有更好的方式，看这里。 ","date":"2022-01-04","objectID":"/posts/bf651441/:5:0","tags":["hugo","theme"],"title":"使用Hugo搭建个人网站(一)-基本设置和LoveIt主题","uri":"/posts/bf651441/"},{"categories":["网络相关"],"content":"本地预览 运行命令： hugo server 在浏览器输入http://localhost:1313来预览。 hugo serve的默认运行环境是 development, 由于本地 development 环境的限制, 评论系统, CDN 和 fingerprint 不会在 development 环境下启用。 如果想开启这些特性，使用下面的命令来开启： hugo serve -e production 至此，一个基本的Hugo网站就搭建起来了。 ","date":"2022-01-04","objectID":"/posts/bf651441/:6:0","tags":["hugo","theme"],"title":"使用Hugo搭建个人网站(一)-基本设置和LoveIt主题","uri":"/posts/bf651441/"}]